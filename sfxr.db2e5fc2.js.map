{"mappings":"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","sources":["node_modules/@excaliburjs/plugin-jsfxr/dist/sfxr.mjs","node_modules/@excaliburjs/plugin-jsfxr/dist/riffwave.mjs"],"sourcesContent":["//import riffwave\r\nimport RIFFWAVE from \"./riffwave.mjs\";\r\n\r\n// Wave shapes\r\nvar SQUARE = 0;\r\nvar SAWTOOTH = 1;\r\nvar SINE = 2;\r\nvar NOISE = 3;\r\n\r\n// Playback volume\r\nvar masterVolume = 1;\r\n\r\nvar OVERSAMPLING = 8;\r\n\r\n/*** Core data structure ***/\r\n\r\n// Sound generation parameters are on [0,1] unless noted SIGNED & thus\r\n// on [-1,1]\r\nfunction Params() {\r\n  this.oldParams = true; // Note what structure this is\r\n\r\n  // Wave shape\r\n  this.wave_type = SQUARE;\r\n\r\n  // Envelope\r\n  this.p_env_attack = 0; // Attack time\r\n  this.p_env_sustain = 0.3; // Sustain time\r\n  this.p_env_punch = 0; // Sustain punch\r\n  this.p_env_decay = 0.4; // Decay time\r\n\r\n  // Tone\r\n  this.p_base_freq = 0.3; // Start frequency\r\n  this.p_freq_limit = 0; // Min frequency cutoff\r\n  this.p_freq_ramp = 0; // Slide (SIGNED)\r\n  this.p_freq_dramp = 0; // Delta slide (SIGNED)\r\n  // Vibrato\r\n  this.p_vib_strength = 0; // Vibrato depth\r\n  this.p_vib_speed = 0; // Vibrato speed\r\n\r\n  // Tonal change\r\n  this.p_arp_mod = 0; // Change amount (SIGNED)\r\n  this.p_arp_speed = 0; // Change speed\r\n\r\n  // Square wave duty (proportion of time signal is high vs. low)\r\n  this.p_duty = 0; // Square duty\r\n  this.p_duty_ramp = 0; // Duty sweep (SIGNED)\r\n\r\n  // Repeat\r\n  this.p_repeat_speed = 0; // Repeat speed\r\n\r\n  // Flanger\r\n  this.p_pha_offset = 0; // Flanger offset (SIGNED)\r\n  this.p_pha_ramp = 0; // Flanger sweep (SIGNED)\r\n\r\n  // Low-pass filter\r\n  this.p_lpf_freq = 1; // Low-pass filter cutoff\r\n  this.p_lpf_ramp = 0; // Low-pass filter cutoff sweep (SIGNED)\r\n  this.p_lpf_resonance = 0; // Low-pass filter resonance\r\n  // High-pass filter\r\n  this.p_hpf_freq = 0; // High-pass filter cutoff\r\n  this.p_hpf_ramp = 0; // High-pass filter cutoff sweep (SIGNED)\r\n\r\n  // Sample parameters\r\n  this.sound_vol = 0.5;\r\n  this.sample_rate = 44100;\r\n  this.sample_size = 8;\r\n}\r\n\r\n/*** Helper functions ***/\r\n\r\nfunction sqr(x) {\r\n  return x * x;\r\n}\r\nfunction cube(x) {\r\n  return x * x * x;\r\n}\r\nfunction sign(x) {\r\n  return x < 0 ? -1 : 1;\r\n}\r\nfunction log(x, b) {\r\n  return Math.log(x) / Math.log(b);\r\n}\r\nvar pow = Math.pow;\r\n\r\nfunction frnd(range) {\r\n  return Math.random() * range;\r\n}\r\n\r\nfunction rndr(from, to) {\r\n  return Math.random() * (to - from) + from;\r\n}\r\n\r\nfunction rnd(max) {\r\n  return Math.floor(Math.random() * (max + 1));\r\n}\r\n\r\n/*** Import/export functions ***/\r\n\r\n// http://stackoverflow.com/questions/3096646/how-to-convert-a-floating-point-number-to-its-binary-representation-ieee-754-i\r\nfunction assembleFloat(sign, exponent, mantissa) {\r\n  return (sign << 31) | (exponent << 23) | mantissa;\r\n}\r\n\r\nfunction floatToNumber(flt) {\r\n  if (isNaN(flt))\r\n    // Special case: NaN\r\n    return assembleFloat(0, 0xff, 0x1337); // Mantissa is nonzero for NaN\r\n\r\n  var sign = flt < 0 ? 1 : 0;\r\n  flt = Math.abs(flt);\r\n  if (flt == 0.0)\r\n    // Special case: +-0\r\n    return assembleFloat(sign, 0, 0);\r\n\r\n  var exponent = Math.floor(Math.log(flt) / Math.LN2);\r\n  if (exponent > 127 || exponent < -126)\r\n    // Special case: +-Infinity (and huge numbers)\r\n    return assembleFloat(sign, 0xff, 0); // Mantissa is zero for +-Infinity\r\n\r\n  var mantissa = flt / Math.pow(2, exponent);\r\n  return assembleFloat(sign, exponent + 127, (mantissa * Math.pow(2, 23)) & 0x7fffff);\r\n}\r\n\r\n// http://stackoverflow.com/a/16001019\r\nfunction numberToFloat(bytes) {\r\n  var sign = bytes & 0x80000000 ? -1 : 1;\r\n  var exponent = ((bytes >> 23) & 0xff) - 127;\r\n  var significand = bytes & ~(-1 << 23);\r\n\r\n  if (exponent == 128) return sign * (significand ? Number.NaN : Number.POSITIVE_INFINITY);\r\n\r\n  if (exponent == -127) {\r\n    if (significand == 0) return sign * 0.0;\r\n    exponent = -126;\r\n    significand /= 1 << 22;\r\n  } else significand = (significand | (1 << 23)) / (1 << 23);\r\n\r\n  return sign * significand * Math.pow(2, exponent);\r\n}\r\n\r\n// export parameter list to URL friendly base58 string\r\n// https://gist.github.com/diafygi/90a3e80ca1c2793220e5/\r\nvar b58alphabet = \"123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz\";\r\nvar params_order = [\r\n  \"wave_type\",\r\n  \"p_env_attack\",\r\n  \"p_env_sustain\",\r\n  \"p_env_punch\",\r\n  \"p_env_decay\",\r\n  \"p_base_freq\",\r\n  \"p_freq_limit\",\r\n  \"p_freq_ramp\",\r\n  \"p_freq_dramp\",\r\n  \"p_vib_strength\",\r\n  \"p_vib_speed\",\r\n  \"p_arp_mod\",\r\n  \"p_arp_speed\",\r\n  \"p_duty\",\r\n  \"p_duty_ramp\",\r\n  \"p_repeat_speed\",\r\n  \"p_pha_offset\",\r\n  \"p_pha_ramp\",\r\n  \"p_lpf_freq\",\r\n  \"p_lpf_ramp\",\r\n  \"p_lpf_resonance\",\r\n  \"p_hpf_freq\",\r\n  \"p_hpf_ramp\",\r\n];\r\n\r\nvar params_signed = [\r\n  \"p_freq_ramp\",\r\n  \"p_freq_dramp\",\r\n  \"p_arp_mod\",\r\n  \"p_duty_ramp\",\r\n  \"p_pha_offset\",\r\n  \"p_pha_ramp\",\r\n  \"p_lpf_ramp\",\r\n  \"p_hpf_ramp\",\r\n];\r\n\r\nParams.prototype.toB58 = function () {\r\n  var convert = [];\r\n  for (var pi in params_order) {\r\n    var p = params_order[pi];\r\n    if (p == \"wave_type\") {\r\n      convert.push(this[p]);\r\n    } else if (p.indexOf(\"p_\") == 0) {\r\n      var val = this[p];\r\n      val = floatToNumber(val);\r\n      convert.push(0xff & val);\r\n      convert.push(0xff & (val >> 8));\r\n      convert.push(0xff & (val >> 16));\r\n      convert.push(0xff & (val >> 24));\r\n    }\r\n  }\r\n  return (function (B, A) {\r\n    var d = [],\r\n      s = \"\",\r\n      i,\r\n      j,\r\n      c,\r\n      n;\r\n    for (i in B) {\r\n      (j = 0), (c = B[i]);\r\n      s += c || s.length ^ i ? \"\" : 1;\r\n      while (j in d || c) {\r\n        n = d[j];\r\n        n = n ? n * 256 + c : c;\r\n        c = (n / 58) | 0;\r\n        d[j] = n % 58;\r\n        j++;\r\n      }\r\n    }\r\n    while (j--) s += A[d[j]];\r\n    return s;\r\n  })(convert, b58alphabet);\r\n};\r\n\r\nParams.prototype.fromB58 = function (b58encoded) {\r\n  this.fromJSON(sfxr.b58decode(b58encoded));\r\n  return this;\r\n};\r\n\r\nParams.prototype.fromJSON = function (struct) {\r\n  for (var p in struct) {\r\n    if (struct.hasOwnProperty(p)) {\r\n      this[p] = struct[p];\r\n    }\r\n  }\r\n  return this;\r\n};\r\n\r\n/*** Presets ***/\r\n\r\n// These functions roll up random sounds appropriate to various\r\n// typical game events:\r\n\r\nParams.prototype.pickupCoin = function () {\r\n  this.wave_type = SAWTOOTH;\r\n  this.p_base_freq = 0.4 + frnd(0.5);\r\n  this.p_env_attack = 0;\r\n  this.p_env_sustain = frnd(0.1);\r\n  this.p_env_decay = 0.1 + frnd(0.4);\r\n  this.p_env_punch = 0.3 + frnd(0.3);\r\n  if (rnd(1)) {\r\n    this.p_arp_speed = 0.5 + frnd(0.2);\r\n    this.p_arp_mod = 0.2 + frnd(0.4);\r\n  }\r\n  return this;\r\n};\r\n\r\nParams.prototype.laserShoot = function () {\r\n  this.wave_type = rnd(2);\r\n  if (this.wave_type === SINE && rnd(1)) this.wave_type = rnd(1);\r\n  if (rnd(2) === 0) {\r\n    this.p_base_freq = 0.3 + frnd(0.6);\r\n    this.p_freq_limit = frnd(0.1);\r\n    this.p_freq_ramp = -0.35 - frnd(0.3);\r\n  } else {\r\n    this.p_base_freq = 0.5 + frnd(0.5);\r\n    this.p_freq_limit = this.p_base_freq - 0.2 - frnd(0.6);\r\n    if (this.p_freq_limit < 0.2) this.p_freq_limit = 0.2;\r\n    this.p_freq_ramp = -0.15 - frnd(0.2);\r\n  }\r\n  if (this.wave_type === SAWTOOTH) this.p_duty = 1;\r\n  if (rnd(1)) {\r\n    this.p_duty = frnd(0.5);\r\n    this.p_duty_ramp = frnd(0.2);\r\n  } else {\r\n    this.p_duty = 0.4 + frnd(0.5);\r\n    this.p_duty_ramp = -frnd(0.7);\r\n  }\r\n  this.p_env_attack = 0;\r\n  this.p_env_sustain = 0.1 + frnd(0.2);\r\n  this.p_env_decay = frnd(0.4);\r\n  if (rnd(1)) this.p_env_punch = frnd(0.3);\r\n  if (rnd(2) === 0) {\r\n    this.p_pha_offset = frnd(0.2);\r\n    this.p_pha_ramp = -frnd(0.2);\r\n  }\r\n  //if (rnd(1))\r\n  this.p_hpf_freq = frnd(0.3);\r\n\r\n  return this;\r\n};\r\n\r\nParams.prototype.explosion = function () {\r\n  this.wave_type = NOISE;\r\n  if (rnd(1)) {\r\n    this.p_base_freq = sqr(0.1 + frnd(0.4));\r\n    this.p_freq_ramp = -0.1 + frnd(0.4);\r\n  } else {\r\n    this.p_base_freq = sqr(0.2 + frnd(0.7));\r\n    this.p_freq_ramp = -0.2 - frnd(0.2);\r\n  }\r\n  if (rnd(4) === 0) this.p_freq_ramp = 0;\r\n  if (rnd(2) === 0) this.p_repeat_speed = 0.3 + frnd(0.5);\r\n  this.p_env_attack = 0;\r\n  this.p_env_sustain = 0.1 + frnd(0.3);\r\n  this.p_env_decay = frnd(0.5);\r\n  if (rnd(1)) {\r\n    this.p_pha_offset = -0.3 + frnd(0.9);\r\n    this.p_pha_ramp = -frnd(0.3);\r\n  }\r\n  this.p_env_punch = 0.2 + frnd(0.6);\r\n  if (rnd(1)) {\r\n    this.p_vib_strength = frnd(0.7);\r\n    this.p_vib_speed = frnd(0.6);\r\n  }\r\n  if (rnd(2) === 0) {\r\n    this.p_arp_speed = 0.6 + frnd(0.3);\r\n    this.p_arp_mod = 0.8 - frnd(1.6);\r\n  }\r\n\r\n  return this;\r\n};\r\n\r\nParams.prototype.powerUp = function () {\r\n  if (rnd(1)) {\r\n    this.wave_type = SAWTOOTH;\r\n    this.p_duty = 1;\r\n  } else {\r\n    this.p_duty = frnd(0.6);\r\n  }\r\n  this.p_base_freq = 0.2 + frnd(0.3);\r\n  if (rnd(1)) {\r\n    this.p_freq_ramp = 0.1 + frnd(0.4);\r\n    this.p_repeat_speed = 0.4 + frnd(0.4);\r\n  } else {\r\n    this.p_freq_ramp = 0.05 + frnd(0.2);\r\n    if (rnd(1)) {\r\n      this.p_vib_strength = frnd(0.7);\r\n      this.p_vib_speed = frnd(0.6);\r\n    }\r\n  }\r\n  this.p_env_attack = 0;\r\n  this.p_env_sustain = frnd(0.4);\r\n  this.p_env_decay = 0.1 + frnd(0.4);\r\n\r\n  return this;\r\n};\r\n\r\nParams.prototype.hitHurt = function () {\r\n  this.wave_type = rnd(2);\r\n  if (this.wave_type === SINE) this.wave_type = NOISE;\r\n  if (this.wave_type === SQUARE) this.p_duty = frnd(0.6);\r\n  if (this.wave_type === SAWTOOTH) this.p_duty = 1;\r\n  this.p_base_freq = 0.2 + frnd(0.6);\r\n  this.p_freq_ramp = -0.3 - frnd(0.4);\r\n  this.p_env_attack = 0;\r\n  this.p_env_sustain = frnd(0.1);\r\n  this.p_env_decay = 0.1 + frnd(0.2);\r\n  if (rnd(1)) this.p_hpf_freq = frnd(0.3);\r\n  return this;\r\n};\r\n\r\nParams.prototype.jump = function () {\r\n  this.wave_type = SQUARE;\r\n  this.p_duty = frnd(0.6);\r\n  this.p_base_freq = 0.3 + frnd(0.3);\r\n  this.p_freq_ramp = 0.1 + frnd(0.2);\r\n  this.p_env_attack = 0;\r\n  this.p_env_sustain = 0.1 + frnd(0.3);\r\n  this.p_env_decay = 0.1 + frnd(0.2);\r\n  if (rnd(1)) this.p_hpf_freq = frnd(0.3);\r\n  if (rnd(1)) this.p_lpf_freq = 1 - frnd(0.6);\r\n  return this;\r\n};\r\n\r\nParams.prototype.blipSelect = function () {\r\n  this.wave_type = rnd(1);\r\n  if (this.wave_type === SQUARE) this.p_duty = frnd(0.6);\r\n  else this.p_duty = 1;\r\n  this.p_base_freq = 0.2 + frnd(0.4);\r\n  this.p_env_attack = 0;\r\n  this.p_env_sustain = 0.1 + frnd(0.1);\r\n  this.p_env_decay = frnd(0.2);\r\n  this.p_hpf_freq = 0.1;\r\n  return this;\r\n};\r\n\r\nParams.prototype.synth = function () {\r\n  this.wave_type = rnd(1);\r\n  this.p_base_freq = [0.2723171360931539, 0.19255692561524382, 0.13615778746815113][rnd(2)];\r\n  this.p_env_attack = rnd(4) > 3 ? frnd(0.5) : 0;\r\n  this.p_env_sustain = frnd(1);\r\n  this.p_env_punch = frnd(1);\r\n  this.p_env_decay = frnd(0.9) + 0.1;\r\n  this.p_arp_mod = [0, 0, 0, 0, -0.3162, 0.7454, 0.7454][rnd(6)];\r\n  this.p_arp_speed = frnd(0.5) + 0.4;\r\n  this.p_duty = frnd(1);\r\n  this.p_duty_ramp = rnd(2) == 2 ? frnd(1) : 0;\r\n  this.p_lpf_freq = [1, 0.9 * frnd(1) * frnd(1) + 0.1][rnd(1)];\r\n  this.p_lpf_ramp = rndr(-1, 1);\r\n  this.p_lpf_resonance = frnd(1);\r\n  this.p_hpf_freq = rnd(3) == 3 ? frnd(1) : 0;\r\n  this.p_hpf_ramp = rnd(3) == 3 ? frnd(1) : 0;\r\n  return this;\r\n};\r\n\r\nParams.prototype.tone = function () {\r\n  this.wave_type = SINE;\r\n  this.p_base_freq = 0.35173364; // 440 Hz\r\n  this.p_env_attack = 0;\r\n  this.p_env_sustain = 0.6641; // 1 sec\r\n  this.p_env_decay = 0;\r\n  this.p_env_punch = 0;\r\n  return this;\r\n};\r\n\r\nParams.prototype.click = function () {\r\n  const base = [\"explosion\", \"hitHurt\"][rnd(1)];\r\n  this[base]();\r\n  if (rnd(1)) {\r\n    this.p_freq_ramp = -0.5 + frnd(1.0);\r\n  }\r\n  if (rnd(1)) {\r\n    this.p_env_sustain = (frnd(0.4) + 0.2) * this.p_env_sustain;\r\n    this.p_env_decay = (frnd(0.4) + 0.2) * this.p_env_decay;\r\n  }\r\n  if (rnd(3) == 0) {\r\n    this.p_env_attack = frnd(0.3);\r\n  }\r\n  this.p_base_freq = 1 - frnd(0.25);\r\n  this.p_hpf_freq = 1 - frnd(0.1);\r\n  return this;\r\n};\r\n\r\nParams.prototype.random = function () {\r\n  this.wave_type = rnd(3);\r\n  if (rnd(1)) this.p_base_freq = cube(frnd(2) - 1) + 0.5;\r\n  else this.p_base_freq = sqr(frnd(1));\r\n  this.p_freq_limit = 0;\r\n  this.p_freq_ramp = Math.pow(frnd(2) - 1, 5);\r\n  if (this.p_base_freq > 0.7 && this.p_freq_ramp > 0.2) this.p_freq_ramp = -this.p_freq_ramp;\r\n  if (this.p_base_freq < 0.2 && this.p_freq_ramp < -0.05) this.p_freq_ramp = -this.p_freq_ramp;\r\n  this.p_freq_dramp = Math.pow(frnd(2) - 1, 3);\r\n  this.p_duty = frnd(2) - 1;\r\n  this.p_duty_ramp = Math.pow(frnd(2) - 1, 3);\r\n  this.p_vib_strength = Math.pow(frnd(2) - 1, 3);\r\n  this.p_vib_speed = rndr(-1, 1);\r\n  this.p_env_attack = cube(rndr(-1, 1));\r\n  this.p_env_sustain = sqr(rndr(-1, 1));\r\n  this.p_env_decay = rndr(-1, 1);\r\n  this.p_env_punch = Math.pow(frnd(0.8), 2);\r\n  if (this.p_env_attack + this.p_env_sustain + this.p_env_decay < 0.2) {\r\n    this.p_env_sustain += 0.2 + frnd(0.3);\r\n    this.p_env_decay += 0.2 + frnd(0.3);\r\n  }\r\n  this.p_lpf_resonance = rndr(-1, 1);\r\n  this.p_lpf_freq = 1 - Math.pow(frnd(1), 3);\r\n  this.p_lpf_ramp = Math.pow(frnd(2) - 1, 3);\r\n  if (this.p_lpf_freq < 0.1 && this.p_lpf_ramp < -0.05) this.p_lpf_ramp = -this.p_lpf_ramp;\r\n  this.p_hpf_freq = Math.pow(frnd(1), 5);\r\n  this.p_hpf_ramp = Math.pow(frnd(2) - 1, 5);\r\n  this.p_pha_offset = Math.pow(frnd(2) - 1, 3);\r\n  this.p_pha_ramp = Math.pow(frnd(2) - 1, 3);\r\n  this.p_repeat_speed = frnd(2) - 1;\r\n  this.p_arp_speed = frnd(2) - 1;\r\n  this.p_arp_mod = frnd(2) - 1;\r\n  return this;\r\n};\r\n\r\nParams.prototype.mutate = function () {\r\n  if (rnd(1)) this.p_base_freq += frnd(0.1) - 0.05;\r\n  if (rnd(1)) this.p_freq_ramp += frnd(0.1) - 0.05;\r\n  if (rnd(1)) this.p_freq_dramp += frnd(0.1) - 0.05;\r\n  if (rnd(1)) this.p_duty += frnd(0.1) - 0.05;\r\n  if (rnd(1)) this.p_duty_ramp += frnd(0.1) - 0.05;\r\n  if (rnd(1)) this.p_vib_strength += frnd(0.1) - 0.05;\r\n  if (rnd(1)) this.p_vib_speed += frnd(0.1) - 0.05;\r\n  if (rnd(1)) this.p_vib_delay += frnd(0.1) - 0.05;\r\n  if (rnd(1)) this.p_env_attack += frnd(0.1) - 0.05;\r\n  if (rnd(1)) this.p_env_sustain += frnd(0.1) - 0.05;\r\n  if (rnd(1)) this.p_env_decay += frnd(0.1) - 0.05;\r\n  if (rnd(1)) this.p_env_punch += frnd(0.1) - 0.05;\r\n  if (rnd(1)) this.p_lpf_resonance += frnd(0.1) - 0.05;\r\n  if (rnd(1)) this.p_lpf_freq += frnd(0.1) - 0.05;\r\n  if (rnd(1)) this.p_lpf_ramp += frnd(0.1) - 0.05;\r\n  if (rnd(1)) this.p_hpf_freq += frnd(0.1) - 0.05;\r\n  if (rnd(1)) this.p_hpf_ramp += frnd(0.1) - 0.05;\r\n  if (rnd(1)) this.p_pha_offset += frnd(0.1) - 0.05;\r\n  if (rnd(1)) this.p_pha_ramp += frnd(0.1) - 0.05;\r\n  if (rnd(1)) this.p_repeat_speed += frnd(0.1) - 0.05;\r\n  if (rnd(1)) this.p_arp_speed += frnd(0.1) - 0.05;\r\n  if (rnd(1)) this.p_arp_mod += frnd(0.1) - 0.05;\r\n  return this;\r\n};\r\n\r\n/*** Simpler namespaced functional API ***/\r\nvar sfxr;\r\nexport default sfxr = {};\r\n\r\nsfxr.toBuffer = function (synthdef) {\r\n  return new SoundEffect(synthdef).getRawBuffer()[\"buffer\"];\r\n};\r\n\r\nsfxr.toWebAudio = function (synthdef, audiocontext) {\r\n  var sfx = new SoundEffect(synthdef);\r\n  var buffer = sfx.getRawBuffer()[\"normalized\"];\r\n  if (audiocontext) {\r\n    var buff = audiocontext.createBuffer(1, buffer.length, sfx.sampleRate);\r\n    var nowBuffering = buff.getChannelData(0);\r\n    for (var i = 0; i < buffer.length; i++) {\r\n      nowBuffering[i] = buffer[i];\r\n    }\r\n    var proc = audiocontext.createBufferSource();\r\n    proc.buffer = buff;\r\n    return proc;\r\n  }\r\n};\r\n\r\nsfxr.toWave = function (synthdef) {\r\n  return new SoundEffect(synthdef).generate();\r\n};\r\n\r\nsfxr.toAudio = function (synthdef) {\r\n  return sfxr.toWave(synthdef).getAudio();\r\n};\r\n\r\nsfxr.play = function (synthdef) {\r\n  return sfxr.toAudio(synthdef).play();\r\n};\r\n\r\nsfxr.b58decode = function (b58encoded) {\r\n  var decoded = (function (S, A) {\r\n    var d = [],\r\n      b = [],\r\n      i,\r\n      j,\r\n      c,\r\n      n;\r\n    for (i in S) {\r\n      (j = 0), (c = A.indexOf(S[i]));\r\n      if (c < 0) return undefined;\r\n      c || b.length ^ i ? i : b.push(0);\r\n      while (j in d || c) {\r\n        n = d[j];\r\n        n = n ? n * 58 + c : c;\r\n        c = n >> 8;\r\n        d[j] = n % 256;\r\n        j++;\r\n      }\r\n    }\r\n    while (j--) b.push(d[j]);\r\n    return new Uint8Array(b);\r\n  })(b58encoded, b58alphabet);\r\n  var result = {};\r\n  for (var pi in params_order) {\r\n    var p = params_order[pi];\r\n    var offset = (pi - 1) * 4 + 1;\r\n    if (p == \"wave_type\") {\r\n      result[p] = decoded[0];\r\n    } else {\r\n      var val = decoded[offset] | (decoded[offset + 1] << 8) | (decoded[offset + 2] << 16) | (decoded[offset + 3] << 24);\r\n      result[p] = numberToFloat(val);\r\n    }\r\n  }\r\n  return result;\r\n};\r\n\r\nsfxr.b58encode = function (synthdef) {\r\n  var p = new Params();\r\n  p.fromJSON(synthdef);\r\n  return p.toB58();\r\n};\r\n\r\nsfxr.generate = function (algorithm, options) {\r\n  const p = new Params();\r\n  const opts = options || {};\r\n  p.sound_vol = opts[\"sound_vol\"] || 0.25;\r\n  p.sample_rate = opts[\"sample_rate\"] || 44100;\r\n  p.sample_size = opts[\"sample_size\"] || 8;\r\n  return p[algorithm]();\r\n};\r\n\r\n/*** Main entry point ***/\r\n\r\nfunction SoundEffect(ps) {\r\n  if (typeof ps == \"string\") {\r\n    var PARAMS = new Params();\r\n    if (ps.indexOf(\"#\") == 0) {\r\n      ps = ps.slice(1);\r\n    }\r\n    ps = PARAMS.fromB58(ps);\r\n  }\r\n  this.init(ps);\r\n}\r\n\r\nSoundEffect.prototype.init = function (ps) {\r\n  this.parameters = ps;\r\n  this.initForRepeat(); // First time through, this is a bit of a misnomer\r\n\r\n  // Waveform shape\r\n  this.waveShape = parseInt(ps.wave_type);\r\n\r\n  // Filter\r\n  this.fltw = Math.pow(ps.p_lpf_freq, 3) * 0.1;\r\n  this.enableLowPassFilter = ps.p_lpf_freq != 1;\r\n  this.fltw_d = 1 + ps.p_lpf_ramp * 0.0001;\r\n  this.fltdmp = (5 / (1 + Math.pow(ps.p_lpf_resonance, 2) * 20)) * (0.01 + this.fltw);\r\n  if (this.fltdmp > 0.8) this.fltdmp = 0.8;\r\n  this.flthp = Math.pow(ps.p_hpf_freq, 2) * 0.1;\r\n  this.flthp_d = 1 + ps.p_hpf_ramp * 0.0003;\r\n\r\n  // Vibrato\r\n  this.vibratoSpeed = Math.pow(ps.p_vib_speed, 2) * 0.01;\r\n  this.vibratoAmplitude = ps.p_vib_strength * 0.5;\r\n\r\n  // Envelope\r\n  this.envelopeLength = [\r\n    Math.floor(ps.p_env_attack * ps.p_env_attack * 100000),\r\n    Math.floor(ps.p_env_sustain * ps.p_env_sustain * 100000),\r\n    Math.floor(ps.p_env_decay * ps.p_env_decay * 100000),\r\n  ];\r\n  this.envelopePunch = ps.p_env_punch;\r\n\r\n  // Flanger\r\n  this.flangerOffset = Math.pow(ps.p_pha_offset, 2) * 1020;\r\n  if (ps.p_pha_offset < 0) this.flangerOffset = -this.flangerOffset;\r\n  this.flangerOffsetSlide = Math.pow(ps.p_pha_ramp, 2) * 1;\r\n  if (ps.p_pha_ramp < 0) this.flangerOffsetSlide = -this.flangerOffsetSlide;\r\n\r\n  // Repeat\r\n  this.repeatTime = Math.floor(Math.pow(1 - ps.p_repeat_speed, 2) * 20000 + 32);\r\n  if (ps.p_repeat_speed === 0) this.repeatTime = 0;\r\n\r\n  this.gain = Math.exp(ps.sound_vol) - 1;\r\n\r\n  this.sampleRate = ps.sample_rate;\r\n  this.bitsPerChannel = ps.sample_size;\r\n};\r\n\r\nSoundEffect.prototype.initForRepeat = function () {\r\n  var ps = this.parameters;\r\n  this.elapsedSinceRepeat = 0;\r\n\r\n  this.period = 100 / (ps.p_base_freq * ps.p_base_freq + 0.001);\r\n  this.periodMax = 100 / (ps.p_freq_limit * ps.p_freq_limit + 0.001);\r\n  this.enableFrequencyCutoff = ps.p_freq_limit > 0;\r\n  this.periodMult = 1 - Math.pow(ps.p_freq_ramp, 3) * 0.01;\r\n  this.periodMultSlide = -Math.pow(ps.p_freq_dramp, 3) * 0.000001;\r\n\r\n  this.dutyCycle = 0.5 - ps.p_duty * 0.5;\r\n  this.dutyCycleSlide = -ps.p_duty_ramp * 0.00005;\r\n\r\n  if (ps.p_arp_mod >= 0) this.arpeggioMultiplier = 1 - Math.pow(ps.p_arp_mod, 2) * 0.9;\r\n  else this.arpeggioMultiplier = 1 + Math.pow(ps.p_arp_mod, 2) * 10;\r\n  this.arpeggioTime = Math.floor(Math.pow(1 - ps.p_arp_speed, 2) * 20000 + 32);\r\n  if (ps.p_arp_speed === 1) this.arpeggioTime = 0;\r\n};\r\n\r\nSoundEffect.prototype.getRawBuffer = function () {\r\n  var fltp = 0;\r\n  var fltdp = 0;\r\n  var fltphp = 0;\r\n\r\n  var noise_buffer = Array(32);\r\n  for (var i = 0; i < 32; ++i) noise_buffer[i] = Math.random() * 2 - 1;\r\n\r\n  var envelopeStage = 0;\r\n  var envelopeElapsed = 0;\r\n\r\n  var vibratoPhase = 0;\r\n\r\n  var phase = 0;\r\n  var ipp = 0;\r\n  var flanger_buffer = Array(1024);\r\n  for (var i = 0; i < 1024; ++i) flanger_buffer[i] = 0;\r\n\r\n  var num_clipped = 0;\r\n\r\n  var buffer = [];\r\n  var normalized = [];\r\n\r\n  var sample_sum = 0;\r\n  var num_summed = 0;\r\n  var summands = Math.floor(44100 / this.sampleRate);\r\n\r\n  for (var t = 0; ; ++t) {\r\n    // Repeats\r\n    if (this.repeatTime != 0 && ++this.elapsedSinceRepeat >= this.repeatTime) this.initForRepeat();\r\n\r\n    // Arpeggio (single)\r\n    if (this.arpeggioTime != 0 && t >= this.arpeggioTime) {\r\n      this.arpeggioTime = 0;\r\n      this.period *= this.arpeggioMultiplier;\r\n    }\r\n\r\n    // Frequency slide, and frequency slide slide!\r\n    this.periodMult += this.periodMultSlide;\r\n    this.period *= this.periodMult;\r\n    if (this.period > this.periodMax) {\r\n      this.period = this.periodMax;\r\n      if (this.enableFrequencyCutoff) break;\r\n    }\r\n\r\n    // Vibrato\r\n    var rfperiod = this.period;\r\n    if (this.vibratoAmplitude > 0) {\r\n      vibratoPhase += this.vibratoSpeed;\r\n      rfperiod = this.period * (1 + Math.sin(vibratoPhase) * this.vibratoAmplitude);\r\n    }\r\n    var iperiod = Math.floor(rfperiod);\r\n    if (iperiod < OVERSAMPLING) iperiod = OVERSAMPLING;\r\n\r\n    // Square wave duty cycle\r\n    this.dutyCycle += this.dutyCycleSlide;\r\n    if (this.dutyCycle < 0) this.dutyCycle = 0;\r\n    if (this.dutyCycle > 0.5) this.dutyCycle = 0.5;\r\n\r\n    // Volume envelope\r\n    if (++envelopeElapsed > this.envelopeLength[envelopeStage]) {\r\n      envelopeElapsed = 0;\r\n      if (++envelopeStage > 2) break;\r\n    }\r\n    var env_vol;\r\n    var envf = envelopeElapsed / this.envelopeLength[envelopeStage];\r\n    if (envelopeStage === 0) {\r\n      // Attack\r\n      env_vol = envf;\r\n    } else if (envelopeStage === 1) {\r\n      // Sustain\r\n      env_vol = 1 + (1 - envf) * 2 * this.envelopePunch;\r\n    } else {\r\n      // Decay\r\n      env_vol = 1 - envf;\r\n    }\r\n\r\n    // Flanger step\r\n    this.flangerOffset += this.flangerOffsetSlide;\r\n    var iphase = Math.abs(Math.floor(this.flangerOffset));\r\n    if (iphase > 1023) iphase = 1023;\r\n\r\n    if (this.flthp_d != 0) {\r\n      this.flthp *= this.flthp_d;\r\n      if (this.flthp < 0.00001) this.flthp = 0.00001;\r\n      if (this.flthp > 0.1) this.flthp = 0.1;\r\n    }\r\n\r\n    // 8x oversampling\r\n    var sample = 0;\r\n    for (var si = 0; si < OVERSAMPLING; ++si) {\r\n      var sub_sample = 0;\r\n      phase++;\r\n      if (phase >= iperiod) {\r\n        phase %= iperiod;\r\n        if (this.waveShape === NOISE) for (var i = 0; i < 32; ++i) noise_buffer[i] = Math.random() * 2 - 1;\r\n      }\r\n\r\n      // Base waveform\r\n      var fp = phase / iperiod;\r\n      if (this.waveShape === SQUARE) {\r\n        if (fp < this.dutyCycle) sub_sample = 0.5;\r\n        else sub_sample = -0.5;\r\n      } else if (this.waveShape === SAWTOOTH) {\r\n        if (fp < this.dutyCycle) sub_sample = -1 + (2 * fp) / this.dutyCycle;\r\n        else sub_sample = 1 - (2 * (fp - this.dutyCycle)) / (1 - this.dutyCycle);\r\n      } else if (this.waveShape === SINE) {\r\n        sub_sample = Math.sin(fp * 2 * Math.PI);\r\n      } else if (this.waveShape === NOISE) {\r\n        sub_sample = noise_buffer[Math.floor((phase * 32) / iperiod)];\r\n      } else {\r\n        throw \"ERROR: Bad wave type: \" + this.waveShape;\r\n      }\r\n\r\n      // Low-pass filter\r\n      var pp = fltp;\r\n      this.fltw *= this.fltw_d;\r\n      if (this.fltw < 0) this.fltw = 0;\r\n      if (this.fltw > 0.1) this.fltw = 0.1;\r\n      if (this.enableLowPassFilter) {\r\n        fltdp += (sub_sample - fltp) * this.fltw;\r\n        fltdp -= fltdp * this.fltdmp;\r\n      } else {\r\n        fltp = sub_sample;\r\n        fltdp = 0;\r\n      }\r\n      fltp += fltdp;\r\n\r\n      // High-pass filter\r\n      fltphp += fltp - pp;\r\n      fltphp -= fltphp * this.flthp;\r\n      sub_sample = fltphp;\r\n\r\n      // Flanger\r\n      flanger_buffer[ipp & 1023] = sub_sample;\r\n      sub_sample += flanger_buffer[(ipp - iphase + 1024) & 1023];\r\n      ipp = (ipp + 1) & 1023;\r\n\r\n      // final accumulation and envelope application\r\n      sample += sub_sample * env_vol;\r\n    }\r\n\r\n    // Accumulate samples appropriately for sample rate\r\n    sample_sum += sample;\r\n    if (++num_summed >= summands) {\r\n      num_summed = 0;\r\n      sample = sample_sum / summands;\r\n      sample_sum = 0;\r\n    } else {\r\n      continue;\r\n    }\r\n\r\n    sample = (sample / OVERSAMPLING) * masterVolume;\r\n    sample *= this.gain;\r\n\r\n    // store the original normalized floating point sample\r\n    normalized.push(sample);\r\n\r\n    if (this.bitsPerChannel === 8) {\r\n      // Rescale [-1, 1) to [0, 256)\r\n      sample = Math.floor((sample + 1) * 128);\r\n      if (sample > 255) {\r\n        sample = 255;\r\n        ++num_clipped;\r\n      } else if (sample < 0) {\r\n        sample = 0;\r\n        ++num_clipped;\r\n      }\r\n      buffer.push(sample);\r\n    } else {\r\n      // Rescale [-1, 1) to [-32768, 32768)\r\n      sample = Math.floor(sample * (1 << 15));\r\n      if (sample >= 1 << 15) {\r\n        sample = (1 << 15) - 1;\r\n        ++num_clipped;\r\n      } else if (sample < -(1 << 15)) {\r\n        sample = -(1 << 15);\r\n        ++num_clipped;\r\n      }\r\n      buffer.push(sample & 0xff);\r\n      buffer.push((sample >> 8) & 0xff);\r\n    }\r\n  }\r\n\r\n  return {\r\n    buffer: buffer,\r\n    normalized: normalized,\r\n    clipped: num_clipped,\r\n  };\r\n};\r\n\r\nSoundEffect.prototype.generate = function () {\r\n  var rendered = this.getRawBuffer();\r\n  var wave = new RIFFWAVE();\r\n  wave.header.sampleRate = this.sampleRate;\r\n  wave.header.bitsPerSample = this.bitsPerChannel;\r\n  wave.Make(rendered.buffer);\r\n  wave.clipping = rendered.clipped;\r\n  wave.buffer = rendered.normalized;\r\n  wave.getAudio = _sfxr_getAudioFn(wave);\r\n  return wave;\r\n};\r\n\r\nvar _actx = null;\r\nvar _sfxr_getAudioFn = function (wave) {\r\n  return function () {\r\n    // check for procedural audio\r\n    var actx = null;\r\n    if (!_actx) {\r\n      if (\"AudioContext\" in window) {\r\n        _actx = new AudioContext();\r\n      } else if (\"webkitAudioContext\" in window) {\r\n        _actx = new webkitAudioContext();\r\n      }\r\n    }\r\n    actx = _actx;\r\n\r\n    if (actx) {\r\n      var buff = actx.createBuffer(1, wave.buffer.length, wave.header.sampleRate);\r\n      var nowBuffering = buff.getChannelData(0);\r\n      for (var i = 0; i < wave.buffer.length; i++) {\r\n        nowBuffering[i] = wave.buffer[i];\r\n      }\r\n      var volume = 1.0;\r\n      var obj = {\r\n        channels: [],\r\n        setVolume: function (v) {\r\n          volume = v;\r\n          return obj;\r\n        },\r\n        play: function () {\r\n          var proc = actx.createBufferSource();\r\n          proc.buffer = buff;\r\n          var gainNode = actx.createGain();\r\n          gainNode.gain.value = volume;\r\n          gainNode.connect(actx.destination);\r\n          proc.connect(gainNode);\r\n          if (proc[\"start\"]) {\r\n            proc.start();\r\n          } else if (proc[\"noteOn\"]) {\r\n            proc.noteOn(0);\r\n          }\r\n          this.channels.push(proc);\r\n          return proc;\r\n        },\r\n      };\r\n      return obj;\r\n    } else {\r\n      var audio = new Audio();\r\n      audio.src = wave.dataURI;\r\n      return audio;\r\n    }\r\n  };\r\n};\r\n\r\n/*** conversions from slider values, internal, and units ***/\r\n\r\n// convert from slider values to internal representation\r\n\r\nvar sliders = {\r\n  p_env_attack: function (v) {\r\n    return v * v * 100000.0;\r\n  },\r\n  p_env_sustain: function (v) {\r\n    return v * v * 100000.0;\r\n  },\r\n  p_env_punch: function (v) {\r\n    return v;\r\n  },\r\n  p_env_decay: function (v) {\r\n    return v * v * 100000.0;\r\n  },\r\n\r\n  p_base_freq: function (v) {\r\n    return (8 * 44100 * (v * v + 0.001)) / 100;\r\n  },\r\n  p_freq_limit: function (v) {\r\n    return (8 * 44100 * (v * v + 0.001)) / 100;\r\n  },\r\n  p_freq_ramp: function (v) {\r\n    return 1.0 - Math.pow(v, 3.0) * 0.01;\r\n  },\r\n  p_freq_dramp: function (v) {\r\n    return -Math.pow(v, 3.0) * 0.000001;\r\n  },\r\n\r\n  p_vib_speed: function (v) {\r\n    return Math.pow(v, 2.0) * 0.01;\r\n  },\r\n  p_vib_strength: function (v) {\r\n    return v * 0.5;\r\n  },\r\n\r\n  p_arp_mod: function (v) {\r\n    return v >= 0 ? 1.0 - Math.pow(v, 2) * 0.9 : 1.0 + Math.pow(v, 2) * 10;\r\n  },\r\n  p_arp_speed: function (v) {\r\n    return v === 1.0 ? 0 : Math.floor(Math.pow(1.0 - v, 2.0) * 20000 + 32);\r\n  },\r\n\r\n  p_duty: function (v) {\r\n    return 0.5 - v * 0.5;\r\n  },\r\n  p_duty_ramp: function (v) {\r\n    return -v * 0.00005;\r\n  },\r\n\r\n  p_repeat_speed: function (v) {\r\n    return v === 0 ? 0 : Math.floor(Math.pow(1 - v, 2) * 20000) + 32;\r\n  },\r\n\r\n  p_pha_offset: function (v) {\r\n    return (v < 0 ? -1 : 1) * Math.pow(v, 2) * 1020;\r\n  },\r\n  p_pha_ramp: function (v) {\r\n    return (v < 0 ? -1 : 1) * Math.pow(v, 2);\r\n  },\r\n\r\n  p_lpf_freq: function (v) {\r\n    return Math.pow(v, 3) * 0.1;\r\n  },\r\n  p_lpf_ramp: function (v) {\r\n    return 1.0 + v * 0.0001;\r\n  },\r\n  p_lpf_resonance: function (v) {\r\n    return 5.0 / (1.0 + Math.pow(v, 2) * 20);\r\n  }, // * (0.01 + fltw);\r\n\r\n  p_hpf_freq: function (v) {\r\n    return Math.pow(v, 2) * 0.1;\r\n  },\r\n  p_hpf_ramp: function (v) {\r\n    return 1.0 + v * 0.0003;\r\n  },\r\n\r\n  sound_vol: function (v) {\r\n    return Math.exp(v) - 1;\r\n  },\r\n};\r\n\r\nvar sliders_inverse = {\r\n  p_env_attack: function (v) {\r\n    return Math.sqrt(v / 100000.0);\r\n  },\r\n  p_env_sustain: function (v) {\r\n    return Math.sqrt(v / 100000.0);\r\n  },\r\n  p_env_punch: function (v) {\r\n    return v;\r\n  },\r\n  p_env_decay: function (v) {\r\n    return Math.sqrt(v / 100000.0);\r\n  },\r\n\r\n  p_base_freq: function (v) {\r\n    return Math.sqrt((v * 100) / 8 / 44100 - 0.001);\r\n  },\r\n  p_freq_limit: function (v) {\r\n    return Math.sqrt((v * 100) / 8 / 44100 - 0.001);\r\n  },\r\n  p_freq_ramp: function (v) {\r\n    return Math.cbrt((1.0 - v) / 0.01);\r\n  },\r\n  p_freq_dramp: function (v) {\r\n    return Math.cbrt(v / -0.000001);\r\n  },\r\n\r\n  p_vib_speed: function (v) {\r\n    return Math.sqrt(v / 0.01);\r\n  },\r\n  p_vib_strength: function (v) {\r\n    return v / 0.5;\r\n  },\r\n\r\n  p_arp_mod: function (v) {\r\n    return v < 1 ? Math.sqrt((1.0 - v) / 0.9) : -Math.sqrt((v - 1.0) / 10.0);\r\n  },\r\n  p_arp_speed: function (v) {\r\n    return v === 0 ? 1.0 : 1.0 - Math.sqrt((v - (v < 100 ? 30 : 32)) / 20000);\r\n  },\r\n\r\n  p_duty: function (v) {\r\n    return (v - 0.5) / -0.5;\r\n  },\r\n  p_duty_ramp: function (v) {\r\n    return v / -0.00005;\r\n  },\r\n\r\n  p_repeat_speed: function (v) {\r\n    return v === 0 ? 0 : -(Math.sqrt((v - 32) / 20000) - 1.0);\r\n  },\r\n\r\n  p_pha_offset: function (v) {\r\n    return (v < 0 ? -1 : 1) * Math.sqrt(Math.abs(v) / 1020);\r\n  },\r\n  p_pha_ramp: function (v) {\r\n    return (v < 0 ? -1 : 1) * Math.sqrt(Math.abs(v));\r\n  },\r\n\r\n  p_lpf_freq: function (v) {\r\n    return Math.cbrt(v / 0.1);\r\n  },\r\n  p_lpf_ramp: function (v) {\r\n    return (v - 1.0) / 0.0001;\r\n  },\r\n  p_lpf_resonance: function (v) {\r\n    return Math.sqrt((1.0 / (v / 5.0) - 1) / 20);\r\n  },\r\n\r\n  p_hpf_freq: function (v) {\r\n    return Math.sqrt(v / 0.1);\r\n  },\r\n  p_hpf_ramp: function (v) {\r\n    return (v - 1.0) / 0.0003;\r\n  },\r\n  sound_vol: function (v) {\r\n    return Math.log(v + 1);\r\n  },\r\n};\r\n\r\n// convert from internal representation to domain value without units\r\n\r\nvar domain = {\r\n  p_env_attack: function (v) {\r\n    return v / 44100;\r\n  },\r\n  p_env_sustain: function (v) {\r\n    return v / 44100;\r\n  },\r\n  p_env_punch: function (v) {\r\n    return v * 100;\r\n  },\r\n  p_env_decay: function (v) {\r\n    return v / 44100;\r\n  },\r\n\r\n  p_base_freq: function (v) {\r\n    return v;\r\n  },\r\n  p_freq_limit: function (v) {\r\n    return v;\r\n  },\r\n  p_freq_ramp: function (v) {\r\n    return (44100 * Math.log(v)) / Math.log(0.5);\r\n  },\r\n  p_freq_dramp: function (v) {\r\n    return (v * 44100) / Math.pow(2, -44101 / 44100);\r\n  },\r\n\r\n  p_vib_speed: function (v) {\r\n    return (441000 / 64) * v;\r\n  },\r\n  p_vib_strength: function (v) {\r\n    return v * 100;\r\n  },\r\n\r\n  p_arp_mod: function (v) {\r\n    return 1 / v;\r\n  },\r\n  p_arp_speed: function (v) {\r\n    return v / 44100;\r\n  },\r\n\r\n  p_duty: function (v) {\r\n    return 100 * v;\r\n  },\r\n  p_duty_ramp: function (v) {\r\n    return 8 * 44100 * v;\r\n  },\r\n\r\n  p_repeat_speed: function (v) {\r\n    return v === 0 ? 0 : 44100 / v;\r\n  },\r\n\r\n  p_pha_offset: function (v) {\r\n    return (1000 * v) / 44100;\r\n  },\r\n  p_pha_ramp: function (v) {\r\n    return 1000 * v;\r\n  },\r\n\r\n  p_lpf_freq: function (v) {\r\n    return v === 0.1 ? 0 : (8 * 44100 * v) / (1 - v);\r\n  },\r\n  p_lpf_ramp: function (v) {\r\n    return Math.pow(v, 44100);\r\n  },\r\n  p_lpf_resonance: function (v) {\r\n    return 100 * (1 - v * 0.11);\r\n  },\r\n\r\n  p_hpf_freq: function (v) {\r\n    return (8 * 44100 * v) / (1 - v);\r\n  },\r\n  p_hpf_ramp: function (v) {\r\n    return Math.pow(v, 44100);\r\n  },\r\n\r\n  sound_vol: function (v) {\r\n    return (10 * Math.log(v * v)) / Math.log(10);\r\n  },\r\n};\r\n\r\nvar domain_inverse = {\r\n  p_env_attack: function (v) {\r\n    return v * 44100;\r\n  },\r\n  p_env_sustain: function (v) {\r\n    return v * 44100;\r\n  },\r\n  p_env_punch: function (v) {\r\n    return v / 100;\r\n  },\r\n  p_env_decay: function (v) {\r\n    return v * 44100;\r\n  },\r\n\r\n  p_base_freq: function (v) {\r\n    return v;\r\n  },\r\n  p_freq_limit: function (v) {\r\n    return v;\r\n  },\r\n  p_freq_ramp: function (v) {\r\n    return Math.exp((Math.log(0.5) * v) / 44100);\r\n  },\r\n  p_freq_dramp: function (v) {\r\n    return (v * Math.pow(2, -44101 / 44100)) / 44100;\r\n  },\r\n\r\n  p_vib_speed: function (v) {\r\n    return (64 / 441000) * v;\r\n  },\r\n  p_vib_strength: function (v) {\r\n    return v / 100;\r\n  },\r\n\r\n  p_arp_mod: function (v) {\r\n    return 1 / v;\r\n  },\r\n  p_arp_speed: function (v) {\r\n    return v * 44100;\r\n  },\r\n\r\n  p_duty: function (v) {\r\n    return v / 100;\r\n  },\r\n  p_duty_ramp: function (v) {\r\n    return v / (8 * 44100);\r\n  },\r\n\r\n  p_repeat_speed: function (v) {\r\n    return v <= 0 ? 0 : v > 1378 ? 32 : 44100 / v;\r\n  },\r\n\r\n  p_pha_offset: function (v) {\r\n    return (v / 1000) * 44100;\r\n  },\r\n  p_pha_ramp: function (v) {\r\n    return v / 1000;\r\n  },\r\n\r\n  p_lpf_freq: function (v) {\r\n    return v / (v + 8 * 44100);\r\n  },\r\n  p_lpf_ramp: function (v) {\r\n    return Math.pow(v, 1 / 44100);\r\n  },\r\n  p_lpf_resonance: function (v) {\r\n    return (1 - v / 100) / 0.11;\r\n  },\r\n\r\n  p_hpf_freq: function (v) {\r\n    return v / (v + 8 * 44100);\r\n  },\r\n  p_hpf_ramp: function (v) {\r\n    return Math.pow(v, 1 / 44100);\r\n  },\r\n\r\n  sound_vol: function (v) {\r\n    return Math.sqrt(Math.pow(10, v / 10));\r\n  },\r\n};\r\n\r\n// convert from internal representation to printable units\r\n\r\nvar units = {\r\n  p_env_attack: function (v) {\r\n    return (v / 44100).toPrecision(4) + \" sec\";\r\n  },\r\n  p_env_sustain: function (v) {\r\n    return (v / 44100).toPrecision(4) + \" sec\";\r\n  },\r\n  p_env_punch: function (v) {\r\n    return \"+\" + (v * 100).toPrecision(4) + \"%\";\r\n  },\r\n  p_env_decay: function (v) {\r\n    return (v / 44100).toPrecision(4) + \" sec\";\r\n  },\r\n\r\n  p_base_freq: function (v) {\r\n    return v.toPrecision(4) + \"Hz\";\r\n  },\r\n  p_freq_limit: function (v) {\r\n    return v.toPrecision(4) + \"Hz\";\r\n  },\r\n  p_freq_ramp: function (v) {\r\n    return ((44100 * Math.log(v)) / Math.log(0.5)).toPrecision(4) + \" 8va/sec\";\r\n  },\r\n  p_freq_dramp: function (v) {\r\n    return ((v * 44100) / Math.pow(2, -44101 / 44100)).toExponential(3) + \" 8va/s^2\";\r\n  },\r\n\r\n  p_vib_speed: function (v) {\r\n    return v === 0 ? \"OFF\" : ((441000 / 64) * v).toPrecision(4) + \" Hz\";\r\n  },\r\n  p_vib_strength: function (v) {\r\n    return v === 0 ? \"OFF\" : \"&plusmn; \" + (v * 100).toPrecision(4) + \"%\";\r\n  },\r\n\r\n  p_arp_mod: function (v) {\r\n    return v === 1 ? \"OFF\" : \"x \" + (1 / v).toPrecision(4);\r\n  },\r\n  p_arp_speed: function (v) {\r\n    return v === 0 ? \"OFF\" : (v / 44100).toPrecision(4) + \" sec\";\r\n  },\r\n\r\n  p_duty: function (v) {\r\n    return (100 * v).toPrecision(4) + \"%\";\r\n  },\r\n  p_duty_ramp: function (v) {\r\n    return (8 * 44100 * v).toPrecision(4) + \"%/sec\";\r\n  },\r\n\r\n  p_repeat_speed: function (v) {\r\n    return v === 0 ? \"OFF\" : (44100 / v).toPrecision(4) + \" Hz\";\r\n  },\r\n\r\n  p_pha_offset: function (v) {\r\n    return v === 0 ? \"OFF\" : ((1000 * v) / 44100).toPrecision(4) + \" msec\";\r\n  },\r\n  // Not so sure about this:\r\n  p_pha_ramp: function (v) {\r\n    return v === 0 ? \"OFF\" : (1000 * v).toPrecision(4) + \" msec/sec\";\r\n  },\r\n\r\n  p_lpf_freq: function (v) {\r\n    return v === 0.1 ? \"OFF\" : Math.round((8 * 44100 * v) / (1 - v)) + \" Hz\";\r\n  },\r\n  p_lpf_ramp: function (v) {\r\n    if (v === 1) return \"OFF\";\r\n    return Math.pow(v, 44100).toPrecision(4) + \" ^sec\";\r\n  },\r\n  p_lpf_resonance: function (v) {\r\n    return (100 * (1 - v * 0.11)).toPrecision(4) + \"%\";\r\n  },\r\n\r\n  p_hpf_freq: function (v) {\r\n    return v === 0 ? \"OFF\" : Math.round((8 * 44100 * v) / (1 - v)) + \" Hz\";\r\n  },\r\n  p_hpf_ramp: function (v) {\r\n    if (v === 1) return \"OFF\";\r\n    return Math.pow(v, 44100).toPrecision(4) + \" ^sec\";\r\n  },\r\n\r\n  sound_vol: function (v) {\r\n    v = (10 * Math.log(v * v)) / Math.log(10);\r\n    var sign = v >= 0 ? \"+\" : \"\";\r\n    return sign + v.toPrecision(4) + \" dB\";\r\n  },\r\n};\r\n\r\n/*** Plumbing ***/\r\n\r\n/* (function (root, factory) {\r\n  if (typeof define === \"function\" && define.amd) {\r\n    // Now we're wrapping the factory and assigning the return\r\n    // value to the root (window) and returning it as well to\r\n    // the AMD loader.\r\n    /*  define([\"./riffwave\"], function (RIFFWAVE) {\r\n      return (root.jsfxr = factory(RIFFWAVE));\r\n    }); \r\n  } else if (typeof module === \"object\" && module.exports) {\r\n    // I've not encountered a need for this yet, since I haven't\r\n    // run into a scenario where plain modules depend on CommonJS\r\n    // *and* I happen to be loading in a CJS browser environment\r\n    // but I'm including it for the sake of being thorough\r\n    //RIFFWAVE = require(\"./riffwave.mjs\");\r\n    module.exports = root.jsfxr = factory(RIFFWAVE);\r\n  }  else {\r\n    root.jsfxr = factory(root.RIFFWAVE);\r\n  } \r\n})(this, function (RIFFWAVE) {\r\n  // module code here....\r\n  return {\r\n    sfxr: sfxr,\r\n    convert: {\r\n      sliders: sliders,\r\n      domain: domain,\r\n      sliders_inverse: sliders_inverse,\r\n      domain_inverse: domain_inverse,\r\n      units: units,\r\n    },\r\n    parameters: {\r\n      order: params_order,\r\n      signed: params_signed,\r\n    },\r\n    Params: Params,\r\n    SoundEffect: SoundEffect,\r\n    waveforms: {\r\n      SQUARE: SQUARE,\r\n      SAWTOOTH: SAWTOOTH,\r\n      SINE: SINE,\r\n      NOISE: NOISE,\r\n    },\r\n  };\r\n});\r\n */\r\n","/*\r\n * RIFFWAVE.js v0.03 - Audio encoder for HTML5 <audio> elements.\r\n * Copyleft 2011 by Pedro Ladaria <pedro.ladaria at Gmail dot com>\r\n *\r\n * Public Domain\r\n *\r\n * Changelog:\r\n *\r\n * 0.01 - First release\r\n * 0.02 - New faster base64 encoding\r\n * 0.03 - Support for 16bit samples\r\n *\r\n * Notes:\r\n *\r\n * 8 bit data is unsigned: 0..255\r\n * 16 bit data is signed: -32,768..32,767\r\n *\r\n */\r\n\r\nlet FastBase64 = {\r\n  chars: \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\",\r\n  encLookup: [],\r\n\r\n  Init: function () {\r\n    for (var i = 0; i < 4096; i++) {\r\n      this.encLookup[i] = this.chars[i >> 6] + this.chars[i & 0x3f];\r\n    }\r\n  },\r\n\r\n  Encode: function (src) {\r\n    var len = src.length;\r\n    var dst = \"\";\r\n    var i = 0;\r\n    while (len > 2) {\r\n      let n = (src[i] << 16) | (src[i + 1] << 8) | src[i + 2];\r\n      dst += this.encLookup[n >> 12] + this.encLookup[n & 0xfff];\r\n      len -= 3;\r\n      i += 3;\r\n    }\r\n    if (len > 0) {\r\n      var n1 = (src[i] & 0xfc) >> 2;\r\n      var n2 = (src[i] & 0x03) << 4;\r\n      if (len > 1) n2 |= (src[++i] & 0xf0) >> 4;\r\n      dst += this.chars[n1];\r\n      dst += this.chars[n2];\r\n      if (len == 2) {\r\n        var n3 = (src[i++] & 0x0f) << 2;\r\n        n3 |= (src[i] & 0xc0) >> 6;\r\n        dst += this.chars[n3];\r\n      }\r\n      if (len == 1) dst += \"=\";\r\n      dst += \"=\";\r\n    }\r\n    return dst;\r\n  }, // end Encode\r\n};\r\n\r\nFastBase64.Init();\r\nvar RIFFWAVE;\r\nexport default RIFFWAVE = function (data) {\r\n  this.data;\r\n  this.wav;\r\n  this.dataURI;\r\n\r\n  this.data = []; // Array containing audio samples\r\n  this.wav = []; // Array containing the generated wave file\r\n  this.dataURI = \"\"; // http://en.wikipedia.org/wiki/Data_URI_scheme\r\n\r\n  this.header = {\r\n    // OFFS SIZE NOTES\r\n    chunkId: [0x52, 0x49, 0x46, 0x46], // 0    4    \"RIFF\" = 0x52494646\r\n    chunkSize: 0, // 4    4    36+SubChunk2Size = 4+(8+SubChunk1Size)+(8+SubChunk2Size)\r\n    format: [0x57, 0x41, 0x56, 0x45], // 8    4    \"WAVE\" = 0x57415645\r\n    subChunk1Id: [0x66, 0x6d, 0x74, 0x20], // 12   4    \"fmt \" = 0x666d7420\r\n    subChunk1Size: 16, // 16   4    16 for PCM\r\n    audioFormat: 1, // 20   2    PCM = 1\r\n    numChannels: 1, // 22   2    Mono = 1, Stereo = 2...\r\n    sampleRate: 8000, // 24   4    8000, 44100...\r\n    byteRate: 0, // 28   4    SampleRate*NumChannels*BitsPerSample/8\r\n    blockAlign: 0, // 32   2    NumChannels*BitsPerSample/8\r\n    bitsPerSample: 8, // 34   2    8 bits = 8, 16 bits = 16\r\n    subChunk2Id: [0x64, 0x61, 0x74, 0x61], // 36   4    \"data\" = 0x64617461\r\n    subChunk2Size: 0, // 40   4    data size = NumSamples*NumChannels*BitsPerSample/8\r\n  };\r\n\r\n  function u32ToArray(i) {\r\n    return [i & 0xff, (i >> 8) & 0xff, (i >> 16) & 0xff, (i >> 24) & 0xff];\r\n  }\r\n\r\n  function u16ToArray(i) {\r\n    return [i & 0xff, (i >> 8) & 0xff];\r\n  }\r\n\r\n  function split16bitArray(data) {\r\n    var r = [];\r\n    var j = 0;\r\n    var len = data.length;\r\n    for (var i = 0; i < len; i++) {\r\n      r[j++] = data[i] & 0xff;\r\n      r[j++] = (data[i] >> 8) & 0xff;\r\n    }\r\n    return r;\r\n  }\r\n\r\n  this.Make = function (data) {\r\n    if (data instanceof Array) this.data = data;\r\n    this.header.byteRate = (this.header.sampleRate * this.header.numChannels * this.header.bitsPerSample) >> 3;\r\n    this.header.blockAlign = (this.header.numChannels * this.header.bitsPerSample) >> 3;\r\n    this.header.subChunk2Size = this.data.length;\r\n    this.header.chunkSize = 36 + this.header.subChunk2Size;\r\n\r\n    this.wav = this.header.chunkId.concat(\r\n      u32ToArray(this.header.chunkSize),\r\n      this.header.format,\r\n      this.header.subChunk1Id,\r\n      u32ToArray(this.header.subChunk1Size),\r\n      u16ToArray(this.header.audioFormat),\r\n      u16ToArray(this.header.numChannels),\r\n      u32ToArray(this.header.sampleRate),\r\n      u32ToArray(this.header.byteRate),\r\n      u16ToArray(this.header.blockAlign),\r\n      u16ToArray(this.header.bitsPerSample),\r\n      this.header.subChunk2Id,\r\n      u32ToArray(this.header.subChunk2Size),\r\n      this.data\r\n    );\r\n    this.dataURI = \"data:audio/wav;base64,\" + FastBase64.Encode(this.wav);\r\n  };\r\n\r\n  if (data instanceof Array) this.Make(data);\r\n}; // end RIFFWAVE\r\n"],"names":[],"version":3,"file":"sfxr.db2e5fc2.js.map"}