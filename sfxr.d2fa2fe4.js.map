{"mappings":"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","sources":["<anon>","node_modules/@excaliburjs/plugin-jsfxr/dist/sfxr.mjs","node_modules/@excaliburjs/plugin-jsfxr/dist/riffwave.mjs"],"sourcesContent":["\nfunction $parcel$defineInteropFlag(a) {\n  Object.defineProperty(a, '__esModule', {value: true, configurable: true});\n}\n\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});\n}\n\n      var $parcel$global = globalThis;\n    var parcelRequire = $parcel$global[\"parcelRequire213c\"];\nvar parcelRegister = parcelRequire.register;\nparcelRegister(\"disUu\", function(module, exports) {\n\n$parcel$defineInteropFlag(module.exports);\n\n$parcel$export(module.exports, \"default\", () => $cc22cbeb3abb3021$export$2e2bcd8739ae039);\n//import riffwave\n\nvar $1TuIX = parcelRequire(\"1TuIX\");\n// Wave shapes\nvar $cc22cbeb3abb3021$var$SQUARE = 0;\nvar $cc22cbeb3abb3021$var$SAWTOOTH = 1;\nvar $cc22cbeb3abb3021$var$SINE = 2;\nvar $cc22cbeb3abb3021$var$NOISE = 3;\n// Playback volume\nvar $cc22cbeb3abb3021$var$masterVolume = 1;\nvar $cc22cbeb3abb3021$var$OVERSAMPLING = 8;\n/*** Core data structure ***/ // Sound generation parameters are on [0,1] unless noted SIGNED & thus\n// on [-1,1]\nfunction $cc22cbeb3abb3021$var$Params() {\n    this.oldParams = true; // Note what structure this is\n    // Wave shape\n    this.wave_type = $cc22cbeb3abb3021$var$SQUARE;\n    // Envelope\n    this.p_env_attack = 0; // Attack time\n    this.p_env_sustain = 0.3; // Sustain time\n    this.p_env_punch = 0; // Sustain punch\n    this.p_env_decay = 0.4; // Decay time\n    // Tone\n    this.p_base_freq = 0.3; // Start frequency\n    this.p_freq_limit = 0; // Min frequency cutoff\n    this.p_freq_ramp = 0; // Slide (SIGNED)\n    this.p_freq_dramp = 0; // Delta slide (SIGNED)\n    // Vibrato\n    this.p_vib_strength = 0; // Vibrato depth\n    this.p_vib_speed = 0; // Vibrato speed\n    // Tonal change\n    this.p_arp_mod = 0; // Change amount (SIGNED)\n    this.p_arp_speed = 0; // Change speed\n    // Square wave duty (proportion of time signal is high vs. low)\n    this.p_duty = 0; // Square duty\n    this.p_duty_ramp = 0; // Duty sweep (SIGNED)\n    // Repeat\n    this.p_repeat_speed = 0; // Repeat speed\n    // Flanger\n    this.p_pha_offset = 0; // Flanger offset (SIGNED)\n    this.p_pha_ramp = 0; // Flanger sweep (SIGNED)\n    // Low-pass filter\n    this.p_lpf_freq = 1; // Low-pass filter cutoff\n    this.p_lpf_ramp = 0; // Low-pass filter cutoff sweep (SIGNED)\n    this.p_lpf_resonance = 0; // Low-pass filter resonance\n    // High-pass filter\n    this.p_hpf_freq = 0; // High-pass filter cutoff\n    this.p_hpf_ramp = 0; // High-pass filter cutoff sweep (SIGNED)\n    // Sample parameters\n    this.sound_vol = 0.5;\n    this.sample_rate = 44100;\n    this.sample_size = 8;\n}\n/*** Helper functions ***/ function $cc22cbeb3abb3021$var$sqr(x) {\n    return x * x;\n}\nfunction $cc22cbeb3abb3021$var$cube(x) {\n    return x * x * x;\n}\nfunction $cc22cbeb3abb3021$var$sign(x) {\n    return x < 0 ? -1 : 1;\n}\nfunction $cc22cbeb3abb3021$var$log(x, b) {\n    return Math.log(x) / Math.log(b);\n}\nvar $cc22cbeb3abb3021$var$pow = Math.pow;\nfunction $cc22cbeb3abb3021$var$frnd(range) {\n    return Math.random() * range;\n}\nfunction $cc22cbeb3abb3021$var$rndr(from, to) {\n    return Math.random() * (to - from) + from;\n}\nfunction $cc22cbeb3abb3021$var$rnd(max) {\n    return Math.floor(Math.random() * (max + 1));\n}\n/*** Import/export functions ***/ // http://stackoverflow.com/questions/3096646/how-to-convert-a-floating-point-number-to-its-binary-representation-ieee-754-i\nfunction $cc22cbeb3abb3021$var$assembleFloat(sign, exponent, mantissa) {\n    return sign << 31 | exponent << 23 | mantissa;\n}\nfunction $cc22cbeb3abb3021$var$floatToNumber(flt) {\n    if (isNaN(flt)) // Special case: NaN\n    return $cc22cbeb3abb3021$var$assembleFloat(0, 0xff, 0x1337); // Mantissa is nonzero for NaN\n    var sign = flt < 0 ? 1 : 0;\n    flt = Math.abs(flt);\n    if (flt == 0.0) // Special case: +-0\n    return $cc22cbeb3abb3021$var$assembleFloat(sign, 0, 0);\n    var exponent = Math.floor(Math.log(flt) / Math.LN2);\n    if (exponent > 127 || exponent < -126) // Special case: +-Infinity (and huge numbers)\n    return $cc22cbeb3abb3021$var$assembleFloat(sign, 0xff, 0); // Mantissa is zero for +-Infinity\n    var mantissa = flt / Math.pow(2, exponent);\n    return $cc22cbeb3abb3021$var$assembleFloat(sign, exponent + 127, mantissa * Math.pow(2, 23) & 0x7fffff);\n}\n// http://stackoverflow.com/a/16001019\nfunction $cc22cbeb3abb3021$var$numberToFloat(bytes) {\n    var sign = bytes & 0x80000000 ? -1 : 1;\n    var exponent = (bytes >> 23 & 0xff) - 127;\n    var significand = bytes & 8388607;\n    if (exponent == 128) return sign * (significand ? Number.NaN : Number.POSITIVE_INFINITY);\n    if (exponent == -127) {\n        if (significand == 0) return sign * 0.0;\n        exponent = -126;\n        significand /= 4194304;\n    } else significand = (significand | 8388608) / 8388608;\n    return sign * significand * Math.pow(2, exponent);\n}\n// export parameter list to URL friendly base58 string\n// https://gist.github.com/diafygi/90a3e80ca1c2793220e5/\nvar $cc22cbeb3abb3021$var$b58alphabet = \"123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz\";\nvar $cc22cbeb3abb3021$var$params_order = [\n    \"wave_type\",\n    \"p_env_attack\",\n    \"p_env_sustain\",\n    \"p_env_punch\",\n    \"p_env_decay\",\n    \"p_base_freq\",\n    \"p_freq_limit\",\n    \"p_freq_ramp\",\n    \"p_freq_dramp\",\n    \"p_vib_strength\",\n    \"p_vib_speed\",\n    \"p_arp_mod\",\n    \"p_arp_speed\",\n    \"p_duty\",\n    \"p_duty_ramp\",\n    \"p_repeat_speed\",\n    \"p_pha_offset\",\n    \"p_pha_ramp\",\n    \"p_lpf_freq\",\n    \"p_lpf_ramp\",\n    \"p_lpf_resonance\",\n    \"p_hpf_freq\",\n    \"p_hpf_ramp\"\n];\nvar $cc22cbeb3abb3021$var$params_signed = [\n    \"p_freq_ramp\",\n    \"p_freq_dramp\",\n    \"p_arp_mod\",\n    \"p_duty_ramp\",\n    \"p_pha_offset\",\n    \"p_pha_ramp\",\n    \"p_lpf_ramp\",\n    \"p_hpf_ramp\"\n];\n$cc22cbeb3abb3021$var$Params.prototype.toB58 = function() {\n    var convert = [];\n    for(var pi in $cc22cbeb3abb3021$var$params_order){\n        var p = $cc22cbeb3abb3021$var$params_order[pi];\n        if (p == \"wave_type\") convert.push(this[p]);\n        else if (p.indexOf(\"p_\") == 0) {\n            var val = this[p];\n            val = $cc22cbeb3abb3021$var$floatToNumber(val);\n            convert.push(0xff & val);\n            convert.push(0xff & val >> 8);\n            convert.push(0xff & val >> 16);\n            convert.push(0xff & val >> 24);\n        }\n    }\n    return function(B, A) {\n        var d = [], s = \"\", i, j, c, n;\n        for(i in B){\n            j = 0, c = B[i];\n            s += c || s.length ^ i ? \"\" : 1;\n            while(j in d || c){\n                n = d[j];\n                n = n ? n * 256 + c : c;\n                c = n / 58 | 0;\n                d[j] = n % 58;\n                j++;\n            }\n        }\n        while(j--)s += A[d[j]];\n        return s;\n    }(convert, $cc22cbeb3abb3021$var$b58alphabet);\n};\n$cc22cbeb3abb3021$var$Params.prototype.fromB58 = function(b58encoded) {\n    this.fromJSON($cc22cbeb3abb3021$var$sfxr.b58decode(b58encoded));\n    return this;\n};\n$cc22cbeb3abb3021$var$Params.prototype.fromJSON = function(struct) {\n    for(var p in struct)if (struct.hasOwnProperty(p)) this[p] = struct[p];\n    return this;\n};\n/*** Presets ***/ // These functions roll up random sounds appropriate to various\n// typical game events:\n$cc22cbeb3abb3021$var$Params.prototype.pickupCoin = function() {\n    this.wave_type = $cc22cbeb3abb3021$var$SAWTOOTH;\n    this.p_base_freq = 0.4 + $cc22cbeb3abb3021$var$frnd(0.5);\n    this.p_env_attack = 0;\n    this.p_env_sustain = $cc22cbeb3abb3021$var$frnd(0.1);\n    this.p_env_decay = 0.1 + $cc22cbeb3abb3021$var$frnd(0.4);\n    this.p_env_punch = 0.3 + $cc22cbeb3abb3021$var$frnd(0.3);\n    if ($cc22cbeb3abb3021$var$rnd(1)) {\n        this.p_arp_speed = 0.5 + $cc22cbeb3abb3021$var$frnd(0.2);\n        this.p_arp_mod = 0.2 + $cc22cbeb3abb3021$var$frnd(0.4);\n    }\n    return this;\n};\n$cc22cbeb3abb3021$var$Params.prototype.laserShoot = function() {\n    this.wave_type = $cc22cbeb3abb3021$var$rnd(2);\n    if (this.wave_type === $cc22cbeb3abb3021$var$SINE && $cc22cbeb3abb3021$var$rnd(1)) this.wave_type = $cc22cbeb3abb3021$var$rnd(1);\n    if ($cc22cbeb3abb3021$var$rnd(2) === 0) {\n        this.p_base_freq = 0.3 + $cc22cbeb3abb3021$var$frnd(0.6);\n        this.p_freq_limit = $cc22cbeb3abb3021$var$frnd(0.1);\n        this.p_freq_ramp = -0.35 - $cc22cbeb3abb3021$var$frnd(0.3);\n    } else {\n        this.p_base_freq = 0.5 + $cc22cbeb3abb3021$var$frnd(0.5);\n        this.p_freq_limit = this.p_base_freq - 0.2 - $cc22cbeb3abb3021$var$frnd(0.6);\n        if (this.p_freq_limit < 0.2) this.p_freq_limit = 0.2;\n        this.p_freq_ramp = -0.15 - $cc22cbeb3abb3021$var$frnd(0.2);\n    }\n    if (this.wave_type === $cc22cbeb3abb3021$var$SAWTOOTH) this.p_duty = 1;\n    if ($cc22cbeb3abb3021$var$rnd(1)) {\n        this.p_duty = $cc22cbeb3abb3021$var$frnd(0.5);\n        this.p_duty_ramp = $cc22cbeb3abb3021$var$frnd(0.2);\n    } else {\n        this.p_duty = 0.4 + $cc22cbeb3abb3021$var$frnd(0.5);\n        this.p_duty_ramp = -$cc22cbeb3abb3021$var$frnd(0.7);\n    }\n    this.p_env_attack = 0;\n    this.p_env_sustain = 0.1 + $cc22cbeb3abb3021$var$frnd(0.2);\n    this.p_env_decay = $cc22cbeb3abb3021$var$frnd(0.4);\n    if ($cc22cbeb3abb3021$var$rnd(1)) this.p_env_punch = $cc22cbeb3abb3021$var$frnd(0.3);\n    if ($cc22cbeb3abb3021$var$rnd(2) === 0) {\n        this.p_pha_offset = $cc22cbeb3abb3021$var$frnd(0.2);\n        this.p_pha_ramp = -$cc22cbeb3abb3021$var$frnd(0.2);\n    }\n    //if (rnd(1))\n    this.p_hpf_freq = $cc22cbeb3abb3021$var$frnd(0.3);\n    return this;\n};\n$cc22cbeb3abb3021$var$Params.prototype.explosion = function() {\n    this.wave_type = $cc22cbeb3abb3021$var$NOISE;\n    if ($cc22cbeb3abb3021$var$rnd(1)) {\n        this.p_base_freq = $cc22cbeb3abb3021$var$sqr(0.1 + $cc22cbeb3abb3021$var$frnd(0.4));\n        this.p_freq_ramp = -0.1 + $cc22cbeb3abb3021$var$frnd(0.4);\n    } else {\n        this.p_base_freq = $cc22cbeb3abb3021$var$sqr(0.2 + $cc22cbeb3abb3021$var$frnd(0.7));\n        this.p_freq_ramp = -0.2 - $cc22cbeb3abb3021$var$frnd(0.2);\n    }\n    if ($cc22cbeb3abb3021$var$rnd(4) === 0) this.p_freq_ramp = 0;\n    if ($cc22cbeb3abb3021$var$rnd(2) === 0) this.p_repeat_speed = 0.3 + $cc22cbeb3abb3021$var$frnd(0.5);\n    this.p_env_attack = 0;\n    this.p_env_sustain = 0.1 + $cc22cbeb3abb3021$var$frnd(0.3);\n    this.p_env_decay = $cc22cbeb3abb3021$var$frnd(0.5);\n    if ($cc22cbeb3abb3021$var$rnd(1)) {\n        this.p_pha_offset = -0.3 + $cc22cbeb3abb3021$var$frnd(0.9);\n        this.p_pha_ramp = -$cc22cbeb3abb3021$var$frnd(0.3);\n    }\n    this.p_env_punch = 0.2 + $cc22cbeb3abb3021$var$frnd(0.6);\n    if ($cc22cbeb3abb3021$var$rnd(1)) {\n        this.p_vib_strength = $cc22cbeb3abb3021$var$frnd(0.7);\n        this.p_vib_speed = $cc22cbeb3abb3021$var$frnd(0.6);\n    }\n    if ($cc22cbeb3abb3021$var$rnd(2) === 0) {\n        this.p_arp_speed = 0.6 + $cc22cbeb3abb3021$var$frnd(0.3);\n        this.p_arp_mod = 0.8 - $cc22cbeb3abb3021$var$frnd(1.6);\n    }\n    return this;\n};\n$cc22cbeb3abb3021$var$Params.prototype.powerUp = function() {\n    if ($cc22cbeb3abb3021$var$rnd(1)) {\n        this.wave_type = $cc22cbeb3abb3021$var$SAWTOOTH;\n        this.p_duty = 1;\n    } else this.p_duty = $cc22cbeb3abb3021$var$frnd(0.6);\n    this.p_base_freq = 0.2 + $cc22cbeb3abb3021$var$frnd(0.3);\n    if ($cc22cbeb3abb3021$var$rnd(1)) {\n        this.p_freq_ramp = 0.1 + $cc22cbeb3abb3021$var$frnd(0.4);\n        this.p_repeat_speed = 0.4 + $cc22cbeb3abb3021$var$frnd(0.4);\n    } else {\n        this.p_freq_ramp = 0.05 + $cc22cbeb3abb3021$var$frnd(0.2);\n        if ($cc22cbeb3abb3021$var$rnd(1)) {\n            this.p_vib_strength = $cc22cbeb3abb3021$var$frnd(0.7);\n            this.p_vib_speed = $cc22cbeb3abb3021$var$frnd(0.6);\n        }\n    }\n    this.p_env_attack = 0;\n    this.p_env_sustain = $cc22cbeb3abb3021$var$frnd(0.4);\n    this.p_env_decay = 0.1 + $cc22cbeb3abb3021$var$frnd(0.4);\n    return this;\n};\n$cc22cbeb3abb3021$var$Params.prototype.hitHurt = function() {\n    this.wave_type = $cc22cbeb3abb3021$var$rnd(2);\n    if (this.wave_type === $cc22cbeb3abb3021$var$SINE) this.wave_type = $cc22cbeb3abb3021$var$NOISE;\n    if (this.wave_type === $cc22cbeb3abb3021$var$SQUARE) this.p_duty = $cc22cbeb3abb3021$var$frnd(0.6);\n    if (this.wave_type === $cc22cbeb3abb3021$var$SAWTOOTH) this.p_duty = 1;\n    this.p_base_freq = 0.2 + $cc22cbeb3abb3021$var$frnd(0.6);\n    this.p_freq_ramp = -0.3 - $cc22cbeb3abb3021$var$frnd(0.4);\n    this.p_env_attack = 0;\n    this.p_env_sustain = $cc22cbeb3abb3021$var$frnd(0.1);\n    this.p_env_decay = 0.1 + $cc22cbeb3abb3021$var$frnd(0.2);\n    if ($cc22cbeb3abb3021$var$rnd(1)) this.p_hpf_freq = $cc22cbeb3abb3021$var$frnd(0.3);\n    return this;\n};\n$cc22cbeb3abb3021$var$Params.prototype.jump = function() {\n    this.wave_type = $cc22cbeb3abb3021$var$SQUARE;\n    this.p_duty = $cc22cbeb3abb3021$var$frnd(0.6);\n    this.p_base_freq = 0.3 + $cc22cbeb3abb3021$var$frnd(0.3);\n    this.p_freq_ramp = 0.1 + $cc22cbeb3abb3021$var$frnd(0.2);\n    this.p_env_attack = 0;\n    this.p_env_sustain = 0.1 + $cc22cbeb3abb3021$var$frnd(0.3);\n    this.p_env_decay = 0.1 + $cc22cbeb3abb3021$var$frnd(0.2);\n    if ($cc22cbeb3abb3021$var$rnd(1)) this.p_hpf_freq = $cc22cbeb3abb3021$var$frnd(0.3);\n    if ($cc22cbeb3abb3021$var$rnd(1)) this.p_lpf_freq = 1 - $cc22cbeb3abb3021$var$frnd(0.6);\n    return this;\n};\n$cc22cbeb3abb3021$var$Params.prototype.blipSelect = function() {\n    this.wave_type = $cc22cbeb3abb3021$var$rnd(1);\n    if (this.wave_type === $cc22cbeb3abb3021$var$SQUARE) this.p_duty = $cc22cbeb3abb3021$var$frnd(0.6);\n    else this.p_duty = 1;\n    this.p_base_freq = 0.2 + $cc22cbeb3abb3021$var$frnd(0.4);\n    this.p_env_attack = 0;\n    this.p_env_sustain = 0.1 + $cc22cbeb3abb3021$var$frnd(0.1);\n    this.p_env_decay = $cc22cbeb3abb3021$var$frnd(0.2);\n    this.p_hpf_freq = 0.1;\n    return this;\n};\n$cc22cbeb3abb3021$var$Params.prototype.synth = function() {\n    this.wave_type = $cc22cbeb3abb3021$var$rnd(1);\n    this.p_base_freq = [\n        0.2723171360931539,\n        0.19255692561524382,\n        0.13615778746815113\n    ][$cc22cbeb3abb3021$var$rnd(2)];\n    this.p_env_attack = $cc22cbeb3abb3021$var$rnd(4) > 3 ? $cc22cbeb3abb3021$var$frnd(0.5) : 0;\n    this.p_env_sustain = $cc22cbeb3abb3021$var$frnd(1);\n    this.p_env_punch = $cc22cbeb3abb3021$var$frnd(1);\n    this.p_env_decay = $cc22cbeb3abb3021$var$frnd(0.9) + 0.1;\n    this.p_arp_mod = [\n        0,\n        0,\n        0,\n        0,\n        -0.3162,\n        0.7454,\n        0.7454\n    ][$cc22cbeb3abb3021$var$rnd(6)];\n    this.p_arp_speed = $cc22cbeb3abb3021$var$frnd(0.5) + 0.4;\n    this.p_duty = $cc22cbeb3abb3021$var$frnd(1);\n    this.p_duty_ramp = $cc22cbeb3abb3021$var$rnd(2) == 2 ? $cc22cbeb3abb3021$var$frnd(1) : 0;\n    this.p_lpf_freq = [\n        1,\n        0.9 * $cc22cbeb3abb3021$var$frnd(1) * $cc22cbeb3abb3021$var$frnd(1) + 0.1\n    ][$cc22cbeb3abb3021$var$rnd(1)];\n    this.p_lpf_ramp = $cc22cbeb3abb3021$var$rndr(-1, 1);\n    this.p_lpf_resonance = $cc22cbeb3abb3021$var$frnd(1);\n    this.p_hpf_freq = $cc22cbeb3abb3021$var$rnd(3) == 3 ? $cc22cbeb3abb3021$var$frnd(1) : 0;\n    this.p_hpf_ramp = $cc22cbeb3abb3021$var$rnd(3) == 3 ? $cc22cbeb3abb3021$var$frnd(1) : 0;\n    return this;\n};\n$cc22cbeb3abb3021$var$Params.prototype.tone = function() {\n    this.wave_type = $cc22cbeb3abb3021$var$SINE;\n    this.p_base_freq = 0.35173364; // 440 Hz\n    this.p_env_attack = 0;\n    this.p_env_sustain = 0.6641; // 1 sec\n    this.p_env_decay = 0;\n    this.p_env_punch = 0;\n    return this;\n};\n$cc22cbeb3abb3021$var$Params.prototype.click = function() {\n    const base = [\n        \"explosion\",\n        \"hitHurt\"\n    ][$cc22cbeb3abb3021$var$rnd(1)];\n    this[base]();\n    if ($cc22cbeb3abb3021$var$rnd(1)) this.p_freq_ramp = -0.5 + $cc22cbeb3abb3021$var$frnd(1.0);\n    if ($cc22cbeb3abb3021$var$rnd(1)) {\n        this.p_env_sustain = ($cc22cbeb3abb3021$var$frnd(0.4) + 0.2) * this.p_env_sustain;\n        this.p_env_decay = ($cc22cbeb3abb3021$var$frnd(0.4) + 0.2) * this.p_env_decay;\n    }\n    if ($cc22cbeb3abb3021$var$rnd(3) == 0) this.p_env_attack = $cc22cbeb3abb3021$var$frnd(0.3);\n    this.p_base_freq = 1 - $cc22cbeb3abb3021$var$frnd(0.25);\n    this.p_hpf_freq = 1 - $cc22cbeb3abb3021$var$frnd(0.1);\n    return this;\n};\n$cc22cbeb3abb3021$var$Params.prototype.random = function() {\n    this.wave_type = $cc22cbeb3abb3021$var$rnd(3);\n    if ($cc22cbeb3abb3021$var$rnd(1)) this.p_base_freq = $cc22cbeb3abb3021$var$cube($cc22cbeb3abb3021$var$frnd(2) - 1) + 0.5;\n    else this.p_base_freq = $cc22cbeb3abb3021$var$sqr($cc22cbeb3abb3021$var$frnd(1));\n    this.p_freq_limit = 0;\n    this.p_freq_ramp = Math.pow($cc22cbeb3abb3021$var$frnd(2) - 1, 5);\n    if (this.p_base_freq > 0.7 && this.p_freq_ramp > 0.2) this.p_freq_ramp = -this.p_freq_ramp;\n    if (this.p_base_freq < 0.2 && this.p_freq_ramp < -0.05) this.p_freq_ramp = -this.p_freq_ramp;\n    this.p_freq_dramp = Math.pow($cc22cbeb3abb3021$var$frnd(2) - 1, 3);\n    this.p_duty = $cc22cbeb3abb3021$var$frnd(2) - 1;\n    this.p_duty_ramp = Math.pow($cc22cbeb3abb3021$var$frnd(2) - 1, 3);\n    this.p_vib_strength = Math.pow($cc22cbeb3abb3021$var$frnd(2) - 1, 3);\n    this.p_vib_speed = $cc22cbeb3abb3021$var$rndr(-1, 1);\n    this.p_env_attack = $cc22cbeb3abb3021$var$cube($cc22cbeb3abb3021$var$rndr(-1, 1));\n    this.p_env_sustain = $cc22cbeb3abb3021$var$sqr($cc22cbeb3abb3021$var$rndr(-1, 1));\n    this.p_env_decay = $cc22cbeb3abb3021$var$rndr(-1, 1);\n    this.p_env_punch = Math.pow($cc22cbeb3abb3021$var$frnd(0.8), 2);\n    if (this.p_env_attack + this.p_env_sustain + this.p_env_decay < 0.2) {\n        this.p_env_sustain += 0.2 + $cc22cbeb3abb3021$var$frnd(0.3);\n        this.p_env_decay += 0.2 + $cc22cbeb3abb3021$var$frnd(0.3);\n    }\n    this.p_lpf_resonance = $cc22cbeb3abb3021$var$rndr(-1, 1);\n    this.p_lpf_freq = 1 - Math.pow($cc22cbeb3abb3021$var$frnd(1), 3);\n    this.p_lpf_ramp = Math.pow($cc22cbeb3abb3021$var$frnd(2) - 1, 3);\n    if (this.p_lpf_freq < 0.1 && this.p_lpf_ramp < -0.05) this.p_lpf_ramp = -this.p_lpf_ramp;\n    this.p_hpf_freq = Math.pow($cc22cbeb3abb3021$var$frnd(1), 5);\n    this.p_hpf_ramp = Math.pow($cc22cbeb3abb3021$var$frnd(2) - 1, 5);\n    this.p_pha_offset = Math.pow($cc22cbeb3abb3021$var$frnd(2) - 1, 3);\n    this.p_pha_ramp = Math.pow($cc22cbeb3abb3021$var$frnd(2) - 1, 3);\n    this.p_repeat_speed = $cc22cbeb3abb3021$var$frnd(2) - 1;\n    this.p_arp_speed = $cc22cbeb3abb3021$var$frnd(2) - 1;\n    this.p_arp_mod = $cc22cbeb3abb3021$var$frnd(2) - 1;\n    return this;\n};\n$cc22cbeb3abb3021$var$Params.prototype.mutate = function() {\n    if ($cc22cbeb3abb3021$var$rnd(1)) this.p_base_freq += $cc22cbeb3abb3021$var$frnd(0.1) - 0.05;\n    if ($cc22cbeb3abb3021$var$rnd(1)) this.p_freq_ramp += $cc22cbeb3abb3021$var$frnd(0.1) - 0.05;\n    if ($cc22cbeb3abb3021$var$rnd(1)) this.p_freq_dramp += $cc22cbeb3abb3021$var$frnd(0.1) - 0.05;\n    if ($cc22cbeb3abb3021$var$rnd(1)) this.p_duty += $cc22cbeb3abb3021$var$frnd(0.1) - 0.05;\n    if ($cc22cbeb3abb3021$var$rnd(1)) this.p_duty_ramp += $cc22cbeb3abb3021$var$frnd(0.1) - 0.05;\n    if ($cc22cbeb3abb3021$var$rnd(1)) this.p_vib_strength += $cc22cbeb3abb3021$var$frnd(0.1) - 0.05;\n    if ($cc22cbeb3abb3021$var$rnd(1)) this.p_vib_speed += $cc22cbeb3abb3021$var$frnd(0.1) - 0.05;\n    if ($cc22cbeb3abb3021$var$rnd(1)) this.p_vib_delay += $cc22cbeb3abb3021$var$frnd(0.1) - 0.05;\n    if ($cc22cbeb3abb3021$var$rnd(1)) this.p_env_attack += $cc22cbeb3abb3021$var$frnd(0.1) - 0.05;\n    if ($cc22cbeb3abb3021$var$rnd(1)) this.p_env_sustain += $cc22cbeb3abb3021$var$frnd(0.1) - 0.05;\n    if ($cc22cbeb3abb3021$var$rnd(1)) this.p_env_decay += $cc22cbeb3abb3021$var$frnd(0.1) - 0.05;\n    if ($cc22cbeb3abb3021$var$rnd(1)) this.p_env_punch += $cc22cbeb3abb3021$var$frnd(0.1) - 0.05;\n    if ($cc22cbeb3abb3021$var$rnd(1)) this.p_lpf_resonance += $cc22cbeb3abb3021$var$frnd(0.1) - 0.05;\n    if ($cc22cbeb3abb3021$var$rnd(1)) this.p_lpf_freq += $cc22cbeb3abb3021$var$frnd(0.1) - 0.05;\n    if ($cc22cbeb3abb3021$var$rnd(1)) this.p_lpf_ramp += $cc22cbeb3abb3021$var$frnd(0.1) - 0.05;\n    if ($cc22cbeb3abb3021$var$rnd(1)) this.p_hpf_freq += $cc22cbeb3abb3021$var$frnd(0.1) - 0.05;\n    if ($cc22cbeb3abb3021$var$rnd(1)) this.p_hpf_ramp += $cc22cbeb3abb3021$var$frnd(0.1) - 0.05;\n    if ($cc22cbeb3abb3021$var$rnd(1)) this.p_pha_offset += $cc22cbeb3abb3021$var$frnd(0.1) - 0.05;\n    if ($cc22cbeb3abb3021$var$rnd(1)) this.p_pha_ramp += $cc22cbeb3abb3021$var$frnd(0.1) - 0.05;\n    if ($cc22cbeb3abb3021$var$rnd(1)) this.p_repeat_speed += $cc22cbeb3abb3021$var$frnd(0.1) - 0.05;\n    if ($cc22cbeb3abb3021$var$rnd(1)) this.p_arp_speed += $cc22cbeb3abb3021$var$frnd(0.1) - 0.05;\n    if ($cc22cbeb3abb3021$var$rnd(1)) this.p_arp_mod += $cc22cbeb3abb3021$var$frnd(0.1) - 0.05;\n    return this;\n};\n/*** Simpler namespaced functional API ***/ var $cc22cbeb3abb3021$var$sfxr;\nvar $cc22cbeb3abb3021$export$2e2bcd8739ae039 = $cc22cbeb3abb3021$var$sfxr = {};\n$cc22cbeb3abb3021$var$sfxr.toBuffer = function(synthdef) {\n    return new $cc22cbeb3abb3021$var$SoundEffect(synthdef).getRawBuffer()[\"buffer\"];\n};\n$cc22cbeb3abb3021$var$sfxr.toWebAudio = function(synthdef, audiocontext) {\n    var sfx = new $cc22cbeb3abb3021$var$SoundEffect(synthdef);\n    var buffer = sfx.getRawBuffer()[\"normalized\"];\n    if (audiocontext) {\n        var buff = audiocontext.createBuffer(1, buffer.length, sfx.sampleRate);\n        var nowBuffering = buff.getChannelData(0);\n        for(var i = 0; i < buffer.length; i++)nowBuffering[i] = buffer[i];\n        var proc = audiocontext.createBufferSource();\n        proc.buffer = buff;\n        return proc;\n    }\n};\n$cc22cbeb3abb3021$var$sfxr.toWave = function(synthdef) {\n    return new $cc22cbeb3abb3021$var$SoundEffect(synthdef).generate();\n};\n$cc22cbeb3abb3021$var$sfxr.toAudio = function(synthdef) {\n    return $cc22cbeb3abb3021$var$sfxr.toWave(synthdef).getAudio();\n};\n$cc22cbeb3abb3021$var$sfxr.play = function(synthdef) {\n    return $cc22cbeb3abb3021$var$sfxr.toAudio(synthdef).play();\n};\n$cc22cbeb3abb3021$var$sfxr.b58decode = function(b58encoded) {\n    var decoded = function(S, A) {\n        var d = [], b = [], i, j, c, n;\n        for(i in S){\n            j = 0, c = A.indexOf(S[i]);\n            if (c < 0) return undefined;\n            c || b.length ^ i ? i : b.push(0);\n            while(j in d || c){\n                n = d[j];\n                n = n ? n * 58 + c : c;\n                c = n >> 8;\n                d[j] = n % 256;\n                j++;\n            }\n        }\n        while(j--)b.push(d[j]);\n        return new Uint8Array(b);\n    }(b58encoded, $cc22cbeb3abb3021$var$b58alphabet);\n    var result = {};\n    for(var pi in $cc22cbeb3abb3021$var$params_order){\n        var p = $cc22cbeb3abb3021$var$params_order[pi];\n        var offset = (pi - 1) * 4 + 1;\n        if (p == \"wave_type\") result[p] = decoded[0];\n        else {\n            var val = decoded[offset] | decoded[offset + 1] << 8 | decoded[offset + 2] << 16 | decoded[offset + 3] << 24;\n            result[p] = $cc22cbeb3abb3021$var$numberToFloat(val);\n        }\n    }\n    return result;\n};\n$cc22cbeb3abb3021$var$sfxr.b58encode = function(synthdef) {\n    var p = new $cc22cbeb3abb3021$var$Params();\n    p.fromJSON(synthdef);\n    return p.toB58();\n};\n$cc22cbeb3abb3021$var$sfxr.generate = function(algorithm, options) {\n    const p = new $cc22cbeb3abb3021$var$Params();\n    const opts = options || {};\n    p.sound_vol = opts[\"sound_vol\"] || 0.25;\n    p.sample_rate = opts[\"sample_rate\"] || 44100;\n    p.sample_size = opts[\"sample_size\"] || 8;\n    return p[algorithm]();\n};\n/*** Main entry point ***/ function $cc22cbeb3abb3021$var$SoundEffect(ps) {\n    if (typeof ps == \"string\") {\n        var PARAMS = new $cc22cbeb3abb3021$var$Params();\n        if (ps.indexOf(\"#\") == 0) ps = ps.slice(1);\n        ps = PARAMS.fromB58(ps);\n    }\n    this.init(ps);\n}\n$cc22cbeb3abb3021$var$SoundEffect.prototype.init = function(ps) {\n    this.parameters = ps;\n    this.initForRepeat(); // First time through, this is a bit of a misnomer\n    // Waveform shape\n    this.waveShape = parseInt(ps.wave_type);\n    // Filter\n    this.fltw = Math.pow(ps.p_lpf_freq, 3) * 0.1;\n    this.enableLowPassFilter = ps.p_lpf_freq != 1;\n    this.fltw_d = 1 + ps.p_lpf_ramp * 0.0001;\n    this.fltdmp = 5 / (1 + Math.pow(ps.p_lpf_resonance, 2) * 20) * (0.01 + this.fltw);\n    if (this.fltdmp > 0.8) this.fltdmp = 0.8;\n    this.flthp = Math.pow(ps.p_hpf_freq, 2) * 0.1;\n    this.flthp_d = 1 + ps.p_hpf_ramp * 0.0003;\n    // Vibrato\n    this.vibratoSpeed = Math.pow(ps.p_vib_speed, 2) * 0.01;\n    this.vibratoAmplitude = ps.p_vib_strength * 0.5;\n    // Envelope\n    this.envelopeLength = [\n        Math.floor(ps.p_env_attack * ps.p_env_attack * 100000),\n        Math.floor(ps.p_env_sustain * ps.p_env_sustain * 100000),\n        Math.floor(ps.p_env_decay * ps.p_env_decay * 100000)\n    ];\n    this.envelopePunch = ps.p_env_punch;\n    // Flanger\n    this.flangerOffset = Math.pow(ps.p_pha_offset, 2) * 1020;\n    if (ps.p_pha_offset < 0) this.flangerOffset = -this.flangerOffset;\n    this.flangerOffsetSlide = Math.pow(ps.p_pha_ramp, 2) * 1;\n    if (ps.p_pha_ramp < 0) this.flangerOffsetSlide = -this.flangerOffsetSlide;\n    // Repeat\n    this.repeatTime = Math.floor(Math.pow(1 - ps.p_repeat_speed, 2) * 20000 + 32);\n    if (ps.p_repeat_speed === 0) this.repeatTime = 0;\n    this.gain = Math.exp(ps.sound_vol) - 1;\n    this.sampleRate = ps.sample_rate;\n    this.bitsPerChannel = ps.sample_size;\n};\n$cc22cbeb3abb3021$var$SoundEffect.prototype.initForRepeat = function() {\n    var ps = this.parameters;\n    this.elapsedSinceRepeat = 0;\n    this.period = 100 / (ps.p_base_freq * ps.p_base_freq + 0.001);\n    this.periodMax = 100 / (ps.p_freq_limit * ps.p_freq_limit + 0.001);\n    this.enableFrequencyCutoff = ps.p_freq_limit > 0;\n    this.periodMult = 1 - Math.pow(ps.p_freq_ramp, 3) * 0.01;\n    this.periodMultSlide = -Math.pow(ps.p_freq_dramp, 3) * 0.000001;\n    this.dutyCycle = 0.5 - ps.p_duty * 0.5;\n    this.dutyCycleSlide = -ps.p_duty_ramp * 0.00005;\n    if (ps.p_arp_mod >= 0) this.arpeggioMultiplier = 1 - Math.pow(ps.p_arp_mod, 2) * 0.9;\n    else this.arpeggioMultiplier = 1 + Math.pow(ps.p_arp_mod, 2) * 10;\n    this.arpeggioTime = Math.floor(Math.pow(1 - ps.p_arp_speed, 2) * 20000 + 32);\n    if (ps.p_arp_speed === 1) this.arpeggioTime = 0;\n};\n$cc22cbeb3abb3021$var$SoundEffect.prototype.getRawBuffer = function() {\n    var fltp = 0;\n    var fltdp = 0;\n    var fltphp = 0;\n    var noise_buffer = Array(32);\n    for(var i = 0; i < 32; ++i)noise_buffer[i] = Math.random() * 2 - 1;\n    var envelopeStage = 0;\n    var envelopeElapsed = 0;\n    var vibratoPhase = 0;\n    var phase = 0;\n    var ipp = 0;\n    var flanger_buffer = Array(1024);\n    for(var i = 0; i < 1024; ++i)flanger_buffer[i] = 0;\n    var num_clipped = 0;\n    var buffer = [];\n    var normalized = [];\n    var sample_sum = 0;\n    var num_summed = 0;\n    var summands = Math.floor(44100 / this.sampleRate);\n    for(var t = 0;; ++t){\n        // Repeats\n        if (this.repeatTime != 0 && ++this.elapsedSinceRepeat >= this.repeatTime) this.initForRepeat();\n        // Arpeggio (single)\n        if (this.arpeggioTime != 0 && t >= this.arpeggioTime) {\n            this.arpeggioTime = 0;\n            this.period *= this.arpeggioMultiplier;\n        }\n        // Frequency slide, and frequency slide slide!\n        this.periodMult += this.periodMultSlide;\n        this.period *= this.periodMult;\n        if (this.period > this.periodMax) {\n            this.period = this.periodMax;\n            if (this.enableFrequencyCutoff) break;\n        }\n        // Vibrato\n        var rfperiod = this.period;\n        if (this.vibratoAmplitude > 0) {\n            vibratoPhase += this.vibratoSpeed;\n            rfperiod = this.period * (1 + Math.sin(vibratoPhase) * this.vibratoAmplitude);\n        }\n        var iperiod = Math.floor(rfperiod);\n        if (iperiod < $cc22cbeb3abb3021$var$OVERSAMPLING) iperiod = $cc22cbeb3abb3021$var$OVERSAMPLING;\n        // Square wave duty cycle\n        this.dutyCycle += this.dutyCycleSlide;\n        if (this.dutyCycle < 0) this.dutyCycle = 0;\n        if (this.dutyCycle > 0.5) this.dutyCycle = 0.5;\n        // Volume envelope\n        if (++envelopeElapsed > this.envelopeLength[envelopeStage]) {\n            envelopeElapsed = 0;\n            if (++envelopeStage > 2) break;\n        }\n        var env_vol;\n        var envf = envelopeElapsed / this.envelopeLength[envelopeStage];\n        if (envelopeStage === 0) // Attack\n        env_vol = envf;\n        else if (envelopeStage === 1) // Sustain\n        env_vol = 1 + (1 - envf) * 2 * this.envelopePunch;\n        else // Decay\n        env_vol = 1 - envf;\n        // Flanger step\n        this.flangerOffset += this.flangerOffsetSlide;\n        var iphase = Math.abs(Math.floor(this.flangerOffset));\n        if (iphase > 1023) iphase = 1023;\n        if (this.flthp_d != 0) {\n            this.flthp *= this.flthp_d;\n            if (this.flthp < 0.00001) this.flthp = 0.00001;\n            if (this.flthp > 0.1) this.flthp = 0.1;\n        }\n        // 8x oversampling\n        var sample = 0;\n        for(var si = 0; si < $cc22cbeb3abb3021$var$OVERSAMPLING; ++si){\n            var sub_sample = 0;\n            phase++;\n            if (phase >= iperiod) {\n                phase %= iperiod;\n                if (this.waveShape === $cc22cbeb3abb3021$var$NOISE) for(var i = 0; i < 32; ++i)noise_buffer[i] = Math.random() * 2 - 1;\n            }\n            // Base waveform\n            var fp = phase / iperiod;\n            if (this.waveShape === $cc22cbeb3abb3021$var$SQUARE) {\n                if (fp < this.dutyCycle) sub_sample = 0.5;\n                else sub_sample = -0.5;\n            } else if (this.waveShape === $cc22cbeb3abb3021$var$SAWTOOTH) {\n                if (fp < this.dutyCycle) sub_sample = -1 + 2 * fp / this.dutyCycle;\n                else sub_sample = 1 - 2 * (fp - this.dutyCycle) / (1 - this.dutyCycle);\n            } else if (this.waveShape === $cc22cbeb3abb3021$var$SINE) sub_sample = Math.sin(fp * 2 * Math.PI);\n            else if (this.waveShape === $cc22cbeb3abb3021$var$NOISE) sub_sample = noise_buffer[Math.floor(phase * 32 / iperiod)];\n            else throw \"ERROR: Bad wave type: \" + this.waveShape;\n            // Low-pass filter\n            var pp = fltp;\n            this.fltw *= this.fltw_d;\n            if (this.fltw < 0) this.fltw = 0;\n            if (this.fltw > 0.1) this.fltw = 0.1;\n            if (this.enableLowPassFilter) {\n                fltdp += (sub_sample - fltp) * this.fltw;\n                fltdp -= fltdp * this.fltdmp;\n            } else {\n                fltp = sub_sample;\n                fltdp = 0;\n            }\n            fltp += fltdp;\n            // High-pass filter\n            fltphp += fltp - pp;\n            fltphp -= fltphp * this.flthp;\n            sub_sample = fltphp;\n            // Flanger\n            flanger_buffer[ipp & 1023] = sub_sample;\n            sub_sample += flanger_buffer[ipp - iphase + 1024 & 1023];\n            ipp = ipp + 1 & 1023;\n            // final accumulation and envelope application\n            sample += sub_sample * env_vol;\n        }\n        // Accumulate samples appropriately for sample rate\n        sample_sum += sample;\n        if (++num_summed >= summands) {\n            num_summed = 0;\n            sample = sample_sum / summands;\n            sample_sum = 0;\n        } else continue;\n        sample = sample / $cc22cbeb3abb3021$var$OVERSAMPLING * $cc22cbeb3abb3021$var$masterVolume;\n        sample *= this.gain;\n        // store the original normalized floating point sample\n        normalized.push(sample);\n        if (this.bitsPerChannel === 8) {\n            // Rescale [-1, 1) to [0, 256)\n            sample = Math.floor((sample + 1) * 128);\n            if (sample > 255) {\n                sample = 255;\n                ++num_clipped;\n            } else if (sample < 0) {\n                sample = 0;\n                ++num_clipped;\n            }\n            buffer.push(sample);\n        } else {\n            // Rescale [-1, 1) to [-32768, 32768)\n            sample = Math.floor(sample * 32768);\n            if (sample >= 32768) {\n                sample = 32767;\n                ++num_clipped;\n            } else if (sample < -32768) {\n                sample = -32768;\n                ++num_clipped;\n            }\n            buffer.push(sample & 0xff);\n            buffer.push(sample >> 8 & 0xff);\n        }\n    }\n    return {\n        buffer: buffer,\n        normalized: normalized,\n        clipped: num_clipped\n    };\n};\n$cc22cbeb3abb3021$var$SoundEffect.prototype.generate = function() {\n    var rendered = this.getRawBuffer();\n    var wave = new (0, $1TuIX.default)();\n    wave.header.sampleRate = this.sampleRate;\n    wave.header.bitsPerSample = this.bitsPerChannel;\n    wave.Make(rendered.buffer);\n    wave.clipping = rendered.clipped;\n    wave.buffer = rendered.normalized;\n    wave.getAudio = $cc22cbeb3abb3021$var$_sfxr_getAudioFn(wave);\n    return wave;\n};\nvar $cc22cbeb3abb3021$var$_actx = null;\nvar $cc22cbeb3abb3021$var$_sfxr_getAudioFn = function(wave) {\n    return function() {\n        // check for procedural audio\n        var actx = null;\n        if (!$cc22cbeb3abb3021$var$_actx) {\n            if (\"AudioContext\" in window) $cc22cbeb3abb3021$var$_actx = new AudioContext();\n            else if (\"webkitAudioContext\" in window) $cc22cbeb3abb3021$var$_actx = new webkitAudioContext();\n        }\n        actx = $cc22cbeb3abb3021$var$_actx;\n        if (actx) {\n            var buff = actx.createBuffer(1, wave.buffer.length, wave.header.sampleRate);\n            var nowBuffering = buff.getChannelData(0);\n            for(var i = 0; i < wave.buffer.length; i++)nowBuffering[i] = wave.buffer[i];\n            var volume = 1.0;\n            var obj = {\n                channels: [],\n                setVolume: function(v) {\n                    volume = v;\n                    return obj;\n                },\n                play: function() {\n                    var proc = actx.createBufferSource();\n                    proc.buffer = buff;\n                    var gainNode = actx.createGain();\n                    gainNode.gain.value = volume;\n                    gainNode.connect(actx.destination);\n                    proc.connect(gainNode);\n                    if (proc[\"start\"]) proc.start();\n                    else if (proc[\"noteOn\"]) proc.noteOn(0);\n                    this.channels.push(proc);\n                    return proc;\n                }\n            };\n            return obj;\n        } else {\n            var audio = new Audio();\n            audio.src = wave.dataURI;\n            return audio;\n        }\n    };\n};\n/*** conversions from slider values, internal, and units ***/ // convert from slider values to internal representation\nvar $cc22cbeb3abb3021$var$sliders = {\n    p_env_attack: function(v) {\n        return v * v * 100000.0;\n    },\n    p_env_sustain: function(v) {\n        return v * v * 100000.0;\n    },\n    p_env_punch: function(v) {\n        return v;\n    },\n    p_env_decay: function(v) {\n        return v * v * 100000.0;\n    },\n    p_base_freq: function(v) {\n        return 352800 * (v * v + 0.001) / 100;\n    },\n    p_freq_limit: function(v) {\n        return 352800 * (v * v + 0.001) / 100;\n    },\n    p_freq_ramp: function(v) {\n        return 1.0 - Math.pow(v, 3.0) * 0.01;\n    },\n    p_freq_dramp: function(v) {\n        return -Math.pow(v, 3.0) * 0.000001;\n    },\n    p_vib_speed: function(v) {\n        return Math.pow(v, 2.0) * 0.01;\n    },\n    p_vib_strength: function(v) {\n        return v * 0.5;\n    },\n    p_arp_mod: function(v) {\n        return v >= 0 ? 1.0 - Math.pow(v, 2) * 0.9 : 1.0 + Math.pow(v, 2) * 10;\n    },\n    p_arp_speed: function(v) {\n        return v === 1.0 ? 0 : Math.floor(Math.pow(1.0 - v, 2.0) * 20000 + 32);\n    },\n    p_duty: function(v) {\n        return 0.5 - v * 0.5;\n    },\n    p_duty_ramp: function(v) {\n        return -v * 0.00005;\n    },\n    p_repeat_speed: function(v) {\n        return v === 0 ? 0 : Math.floor(Math.pow(1 - v, 2) * 20000) + 32;\n    },\n    p_pha_offset: function(v) {\n        return (v < 0 ? -1 : 1) * Math.pow(v, 2) * 1020;\n    },\n    p_pha_ramp: function(v) {\n        return (v < 0 ? -1 : 1) * Math.pow(v, 2);\n    },\n    p_lpf_freq: function(v) {\n        return Math.pow(v, 3) * 0.1;\n    },\n    p_lpf_ramp: function(v) {\n        return 1.0 + v * 0.0001;\n    },\n    p_lpf_resonance: function(v) {\n        return 5.0 / (1.0 + Math.pow(v, 2) * 20);\n    },\n    p_hpf_freq: function(v) {\n        return Math.pow(v, 2) * 0.1;\n    },\n    p_hpf_ramp: function(v) {\n        return 1.0 + v * 0.0003;\n    },\n    sound_vol: function(v) {\n        return Math.exp(v) - 1;\n    }\n};\nvar $cc22cbeb3abb3021$var$sliders_inverse = {\n    p_env_attack: function(v) {\n        return Math.sqrt(v / 100000.0);\n    },\n    p_env_sustain: function(v) {\n        return Math.sqrt(v / 100000.0);\n    },\n    p_env_punch: function(v) {\n        return v;\n    },\n    p_env_decay: function(v) {\n        return Math.sqrt(v / 100000.0);\n    },\n    p_base_freq: function(v) {\n        return Math.sqrt(v * 100 / 8 / 44100 - 0.001);\n    },\n    p_freq_limit: function(v) {\n        return Math.sqrt(v * 100 / 8 / 44100 - 0.001);\n    },\n    p_freq_ramp: function(v) {\n        return Math.cbrt((1.0 - v) / 0.01);\n    },\n    p_freq_dramp: function(v) {\n        return Math.cbrt(v / -0.000001);\n    },\n    p_vib_speed: function(v) {\n        return Math.sqrt(v / 0.01);\n    },\n    p_vib_strength: function(v) {\n        return v / 0.5;\n    },\n    p_arp_mod: function(v) {\n        return v < 1 ? Math.sqrt((1.0 - v) / 0.9) : -Math.sqrt((v - 1.0) / 10.0);\n    },\n    p_arp_speed: function(v) {\n        return v === 0 ? 1.0 : 1.0 - Math.sqrt((v - (v < 100 ? 30 : 32)) / 20000);\n    },\n    p_duty: function(v) {\n        return (v - 0.5) / -0.5;\n    },\n    p_duty_ramp: function(v) {\n        return v / -0.00005;\n    },\n    p_repeat_speed: function(v) {\n        return v === 0 ? 0 : -(Math.sqrt((v - 32) / 20000) - 1.0);\n    },\n    p_pha_offset: function(v) {\n        return (v < 0 ? -1 : 1) * Math.sqrt(Math.abs(v) / 1020);\n    },\n    p_pha_ramp: function(v) {\n        return (v < 0 ? -1 : 1) * Math.sqrt(Math.abs(v));\n    },\n    p_lpf_freq: function(v) {\n        return Math.cbrt(v / 0.1);\n    },\n    p_lpf_ramp: function(v) {\n        return (v - 1.0) / 0.0001;\n    },\n    p_lpf_resonance: function(v) {\n        return Math.sqrt((1.0 / (v / 5.0) - 1) / 20);\n    },\n    p_hpf_freq: function(v) {\n        return Math.sqrt(v / 0.1);\n    },\n    p_hpf_ramp: function(v) {\n        return (v - 1.0) / 0.0003;\n    },\n    sound_vol: function(v) {\n        return Math.log(v + 1);\n    }\n};\n// convert from internal representation to domain value without units\nvar $cc22cbeb3abb3021$var$domain = {\n    p_env_attack: function(v) {\n        return v / 44100;\n    },\n    p_env_sustain: function(v) {\n        return v / 44100;\n    },\n    p_env_punch: function(v) {\n        return v * 100;\n    },\n    p_env_decay: function(v) {\n        return v / 44100;\n    },\n    p_base_freq: function(v) {\n        return v;\n    },\n    p_freq_limit: function(v) {\n        return v;\n    },\n    p_freq_ramp: function(v) {\n        return 44100 * Math.log(v) / Math.log(0.5);\n    },\n    p_freq_dramp: function(v) {\n        return v * 44100 / Math.pow(2, -44101 / 44100);\n    },\n    p_vib_speed: function(v) {\n        return 6890.625 * v;\n    },\n    p_vib_strength: function(v) {\n        return v * 100;\n    },\n    p_arp_mod: function(v) {\n        return 1 / v;\n    },\n    p_arp_speed: function(v) {\n        return v / 44100;\n    },\n    p_duty: function(v) {\n        return 100 * v;\n    },\n    p_duty_ramp: function(v) {\n        return 352800 * v;\n    },\n    p_repeat_speed: function(v) {\n        return v === 0 ? 0 : 44100 / v;\n    },\n    p_pha_offset: function(v) {\n        return 1000 * v / 44100;\n    },\n    p_pha_ramp: function(v) {\n        return 1000 * v;\n    },\n    p_lpf_freq: function(v) {\n        return v === 0.1 ? 0 : 352800 * v / (1 - v);\n    },\n    p_lpf_ramp: function(v) {\n        return Math.pow(v, 44100);\n    },\n    p_lpf_resonance: function(v) {\n        return 100 * (1 - v * 0.11);\n    },\n    p_hpf_freq: function(v) {\n        return 352800 * v / (1 - v);\n    },\n    p_hpf_ramp: function(v) {\n        return Math.pow(v, 44100);\n    },\n    sound_vol: function(v) {\n        return 10 * Math.log(v * v) / Math.log(10);\n    }\n};\nvar $cc22cbeb3abb3021$var$domain_inverse = {\n    p_env_attack: function(v) {\n        return v * 44100;\n    },\n    p_env_sustain: function(v) {\n        return v * 44100;\n    },\n    p_env_punch: function(v) {\n        return v / 100;\n    },\n    p_env_decay: function(v) {\n        return v * 44100;\n    },\n    p_base_freq: function(v) {\n        return v;\n    },\n    p_freq_limit: function(v) {\n        return v;\n    },\n    p_freq_ramp: function(v) {\n        return Math.exp(Math.log(0.5) * v / 44100);\n    },\n    p_freq_dramp: function(v) {\n        return v * Math.pow(2, -44101 / 44100) / 44100;\n    },\n    p_vib_speed: function(v) {\n        return 64 / 441000 * v;\n    },\n    p_vib_strength: function(v) {\n        return v / 100;\n    },\n    p_arp_mod: function(v) {\n        return 1 / v;\n    },\n    p_arp_speed: function(v) {\n        return v * 44100;\n    },\n    p_duty: function(v) {\n        return v / 100;\n    },\n    p_duty_ramp: function(v) {\n        return v / 352800;\n    },\n    p_repeat_speed: function(v) {\n        return v <= 0 ? 0 : v > 1378 ? 32 : 44100 / v;\n    },\n    p_pha_offset: function(v) {\n        return v / 1000 * 44100;\n    },\n    p_pha_ramp: function(v) {\n        return v / 1000;\n    },\n    p_lpf_freq: function(v) {\n        return v / (v + 352800);\n    },\n    p_lpf_ramp: function(v) {\n        return Math.pow(v, 1 / 44100);\n    },\n    p_lpf_resonance: function(v) {\n        return (1 - v / 100) / 0.11;\n    },\n    p_hpf_freq: function(v) {\n        return v / (v + 352800);\n    },\n    p_hpf_ramp: function(v) {\n        return Math.pow(v, 1 / 44100);\n    },\n    sound_vol: function(v) {\n        return Math.sqrt(Math.pow(10, v / 10));\n    }\n};\n// convert from internal representation to printable units\nvar $cc22cbeb3abb3021$var$units = {\n    p_env_attack: function(v) {\n        return (v / 44100).toPrecision(4) + \" sec\";\n    },\n    p_env_sustain: function(v) {\n        return (v / 44100).toPrecision(4) + \" sec\";\n    },\n    p_env_punch: function(v) {\n        return \"+\" + (v * 100).toPrecision(4) + \"%\";\n    },\n    p_env_decay: function(v) {\n        return (v / 44100).toPrecision(4) + \" sec\";\n    },\n    p_base_freq: function(v) {\n        return v.toPrecision(4) + \"Hz\";\n    },\n    p_freq_limit: function(v) {\n        return v.toPrecision(4) + \"Hz\";\n    },\n    p_freq_ramp: function(v) {\n        return (44100 * Math.log(v) / Math.log(0.5)).toPrecision(4) + \" 8va/sec\";\n    },\n    p_freq_dramp: function(v) {\n        return (v * 44100 / Math.pow(2, -44101 / 44100)).toExponential(3) + \" 8va/s^2\";\n    },\n    p_vib_speed: function(v) {\n        return v === 0 ? \"OFF\" : (6890.625 * v).toPrecision(4) + \" Hz\";\n    },\n    p_vib_strength: function(v) {\n        return v === 0 ? \"OFF\" : \"&plusmn; \" + (v * 100).toPrecision(4) + \"%\";\n    },\n    p_arp_mod: function(v) {\n        return v === 1 ? \"OFF\" : \"x \" + (1 / v).toPrecision(4);\n    },\n    p_arp_speed: function(v) {\n        return v === 0 ? \"OFF\" : (v / 44100).toPrecision(4) + \" sec\";\n    },\n    p_duty: function(v) {\n        return (100 * v).toPrecision(4) + \"%\";\n    },\n    p_duty_ramp: function(v) {\n        return (352800 * v).toPrecision(4) + \"%/sec\";\n    },\n    p_repeat_speed: function(v) {\n        return v === 0 ? \"OFF\" : (44100 / v).toPrecision(4) + \" Hz\";\n    },\n    p_pha_offset: function(v) {\n        return v === 0 ? \"OFF\" : (1000 * v / 44100).toPrecision(4) + \" msec\";\n    },\n    // Not so sure about this:\n    p_pha_ramp: function(v) {\n        return v === 0 ? \"OFF\" : (1000 * v).toPrecision(4) + \" msec/sec\";\n    },\n    p_lpf_freq: function(v) {\n        return v === 0.1 ? \"OFF\" : Math.round(352800 * v / (1 - v)) + \" Hz\";\n    },\n    p_lpf_ramp: function(v) {\n        if (v === 1) return \"OFF\";\n        return Math.pow(v, 44100).toPrecision(4) + \" ^sec\";\n    },\n    p_lpf_resonance: function(v) {\n        return (100 * (1 - v * 0.11)).toPrecision(4) + \"%\";\n    },\n    p_hpf_freq: function(v) {\n        return v === 0 ? \"OFF\" : Math.round(352800 * v / (1 - v)) + \" Hz\";\n    },\n    p_hpf_ramp: function(v) {\n        if (v === 1) return \"OFF\";\n        return Math.pow(v, 44100).toPrecision(4) + \" ^sec\";\n    },\n    sound_vol: function(v) {\n        v = 10 * Math.log(v * v) / Math.log(10);\n        var sign = v >= 0 ? \"+\" : \"\";\n        return sign + v.toPrecision(4) + \" dB\";\n    }\n}; /*** Plumbing ***/  /* (function (root, factory) {\r\n  if (typeof define === \"function\" && define.amd) {\r\n    // Now we're wrapping the factory and assigning the return\r\n    // value to the root (window) and returning it as well to\r\n    // the AMD loader.\r\n    /*  define([\"./riffwave\"], function (RIFFWAVE) {\r\n      return (root.jsfxr = factory(RIFFWAVE));\r\n    }); \r\n  } else if (typeof module === \"object\" && module.exports) {\r\n    // I've not encountered a need for this yet, since I haven't\r\n    // run into a scenario where plain modules depend on CommonJS\r\n    // *and* I happen to be loading in a CJS browser environment\r\n    // but I'm including it for the sake of being thorough\r\n    //RIFFWAVE = require(\"./riffwave.mjs\");\r\n    module.exports = root.jsfxr = factory(RIFFWAVE);\r\n  }  else {\r\n    root.jsfxr = factory(root.RIFFWAVE);\r\n  } \r\n})(this, function (RIFFWAVE) {\r\n  // module code here....\r\n  return {\r\n    sfxr: sfxr,\r\n    convert: {\r\n      sliders: sliders,\r\n      domain: domain,\r\n      sliders_inverse: sliders_inverse,\r\n      domain_inverse: domain_inverse,\r\n      units: units,\r\n    },\r\n    parameters: {\r\n      order: params_order,\r\n      signed: params_signed,\r\n    },\r\n    Params: Params,\r\n    SoundEffect: SoundEffect,\r\n    waveforms: {\r\n      SQUARE: SQUARE,\r\n      SAWTOOTH: SAWTOOTH,\r\n      SINE: SINE,\r\n      NOISE: NOISE,\r\n    },\r\n  };\r\n});\r\n */ \n\n});\nparcelRegister(\"1TuIX\", function(module, exports) {\n\n$parcel$export(module.exports, \"default\", () => $44b164ac3b7136fc$export$2e2bcd8739ae039);\n/*\r\n * RIFFWAVE.js v0.03 - Audio encoder for HTML5 <audio> elements.\r\n * Copyleft 2011 by Pedro Ladaria <pedro.ladaria at Gmail dot com>\r\n *\r\n * Public Domain\r\n *\r\n * Changelog:\r\n *\r\n * 0.01 - First release\r\n * 0.02 - New faster base64 encoding\r\n * 0.03 - Support for 16bit samples\r\n *\r\n * Notes:\r\n *\r\n * 8 bit data is unsigned: 0..255\r\n * 16 bit data is signed: -32,768..32,767\r\n *\r\n */ let $44b164ac3b7136fc$var$FastBase64 = {\n    chars: \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\",\n    encLookup: [],\n    Init: function() {\n        for(var i = 0; i < 4096; i++)this.encLookup[i] = this.chars[i >> 6] + this.chars[i & 0x3f];\n    },\n    Encode: function(src) {\n        var len = src.length;\n        var dst = \"\";\n        var i = 0;\n        while(len > 2){\n            let n = src[i] << 16 | src[i + 1] << 8 | src[i + 2];\n            dst += this.encLookup[n >> 12] + this.encLookup[n & 0xfff];\n            len -= 3;\n            i += 3;\n        }\n        if (len > 0) {\n            var n1 = (src[i] & 0xfc) >> 2;\n            var n2 = (src[i] & 0x03) << 4;\n            if (len > 1) n2 |= (src[++i] & 0xf0) >> 4;\n            dst += this.chars[n1];\n            dst += this.chars[n2];\n            if (len == 2) {\n                var n3 = (src[i++] & 0x0f) << 2;\n                n3 |= (src[i] & 0xc0) >> 6;\n                dst += this.chars[n3];\n            }\n            if (len == 1) dst += \"=\";\n            dst += \"=\";\n        }\n        return dst;\n    }\n};\n$44b164ac3b7136fc$var$FastBase64.Init();\nvar $44b164ac3b7136fc$var$RIFFWAVE;\nvar $44b164ac3b7136fc$export$2e2bcd8739ae039 // end RIFFWAVE\n = $44b164ac3b7136fc$var$RIFFWAVE = function(data) {\n    this.data;\n    this.wav;\n    this.dataURI;\n    this.data = []; // Array containing audio samples\n    this.wav = []; // Array containing the generated wave file\n    this.dataURI = \"\"; // http://en.wikipedia.org/wiki/Data_URI_scheme\n    this.header = {\n        // OFFS SIZE NOTES\n        chunkId: [\n            0x52,\n            0x49,\n            0x46,\n            0x46\n        ],\n        chunkSize: 0,\n        format: [\n            0x57,\n            0x41,\n            0x56,\n            0x45\n        ],\n        subChunk1Id: [\n            0x66,\n            0x6d,\n            0x74,\n            0x20\n        ],\n        subChunk1Size: 16,\n        audioFormat: 1,\n        numChannels: 1,\n        sampleRate: 8000,\n        byteRate: 0,\n        blockAlign: 0,\n        bitsPerSample: 8,\n        subChunk2Id: [\n            0x64,\n            0x61,\n            0x74,\n            0x61\n        ],\n        subChunk2Size: 0\n    };\n    function u32ToArray(i) {\n        return [\n            i & 0xff,\n            i >> 8 & 0xff,\n            i >> 16 & 0xff,\n            i >> 24 & 0xff\n        ];\n    }\n    function u16ToArray(i) {\n        return [\n            i & 0xff,\n            i >> 8 & 0xff\n        ];\n    }\n    function split16bitArray(data) {\n        var r = [];\n        var j = 0;\n        var len = data.length;\n        for(var i = 0; i < len; i++){\n            r[j++] = data[i] & 0xff;\n            r[j++] = data[i] >> 8 & 0xff;\n        }\n        return r;\n    }\n    this.Make = function(data) {\n        if (data instanceof Array) this.data = data;\n        this.header.byteRate = this.header.sampleRate * this.header.numChannels * this.header.bitsPerSample >> 3;\n        this.header.blockAlign = this.header.numChannels * this.header.bitsPerSample >> 3;\n        this.header.subChunk2Size = this.data.length;\n        this.header.chunkSize = 36 + this.header.subChunk2Size;\n        this.wav = this.header.chunkId.concat(u32ToArray(this.header.chunkSize), this.header.format, this.header.subChunk1Id, u32ToArray(this.header.subChunk1Size), u16ToArray(this.header.audioFormat), u16ToArray(this.header.numChannels), u32ToArray(this.header.sampleRate), u32ToArray(this.header.byteRate), u16ToArray(this.header.blockAlign), u16ToArray(this.header.bitsPerSample), this.header.subChunk2Id, u32ToArray(this.header.subChunk2Size), this.data);\n        this.dataURI = \"data:audio/wav;base64,\" + $44b164ac3b7136fc$var$FastBase64.Encode(this.wav);\n    };\n    if (data instanceof Array) this.Make(data);\n};\n\n});\n\n\n\n//# sourceMappingURL=sfxr.d2fa2fe4.js.map\n","//import riffwave\r\nimport RIFFWAVE from \"./riffwave.mjs\";\r\n\r\n// Wave shapes\r\nvar SQUARE = 0;\r\nvar SAWTOOTH = 1;\r\nvar SINE = 2;\r\nvar NOISE = 3;\r\n\r\n// Playback volume\r\nvar masterVolume = 1;\r\n\r\nvar OVERSAMPLING = 8;\r\n\r\n/*** Core data structure ***/\r\n\r\n// Sound generation parameters are on [0,1] unless noted SIGNED & thus\r\n// on [-1,1]\r\nfunction Params() {\r\n  this.oldParams = true; // Note what structure this is\r\n\r\n  // Wave shape\r\n  this.wave_type = SQUARE;\r\n\r\n  // Envelope\r\n  this.p_env_attack = 0; // Attack time\r\n  this.p_env_sustain = 0.3; // Sustain time\r\n  this.p_env_punch = 0; // Sustain punch\r\n  this.p_env_decay = 0.4; // Decay time\r\n\r\n  // Tone\r\n  this.p_base_freq = 0.3; // Start frequency\r\n  this.p_freq_limit = 0; // Min frequency cutoff\r\n  this.p_freq_ramp = 0; // Slide (SIGNED)\r\n  this.p_freq_dramp = 0; // Delta slide (SIGNED)\r\n  // Vibrato\r\n  this.p_vib_strength = 0; // Vibrato depth\r\n  this.p_vib_speed = 0; // Vibrato speed\r\n\r\n  // Tonal change\r\n  this.p_arp_mod = 0; // Change amount (SIGNED)\r\n  this.p_arp_speed = 0; // Change speed\r\n\r\n  // Square wave duty (proportion of time signal is high vs. low)\r\n  this.p_duty = 0; // Square duty\r\n  this.p_duty_ramp = 0; // Duty sweep (SIGNED)\r\n\r\n  // Repeat\r\n  this.p_repeat_speed = 0; // Repeat speed\r\n\r\n  // Flanger\r\n  this.p_pha_offset = 0; // Flanger offset (SIGNED)\r\n  this.p_pha_ramp = 0; // Flanger sweep (SIGNED)\r\n\r\n  // Low-pass filter\r\n  this.p_lpf_freq = 1; // Low-pass filter cutoff\r\n  this.p_lpf_ramp = 0; // Low-pass filter cutoff sweep (SIGNED)\r\n  this.p_lpf_resonance = 0; // Low-pass filter resonance\r\n  // High-pass filter\r\n  this.p_hpf_freq = 0; // High-pass filter cutoff\r\n  this.p_hpf_ramp = 0; // High-pass filter cutoff sweep (SIGNED)\r\n\r\n  // Sample parameters\r\n  this.sound_vol = 0.5;\r\n  this.sample_rate = 44100;\r\n  this.sample_size = 8;\r\n}\r\n\r\n/*** Helper functions ***/\r\n\r\nfunction sqr(x) {\r\n  return x * x;\r\n}\r\nfunction cube(x) {\r\n  return x * x * x;\r\n}\r\nfunction sign(x) {\r\n  return x < 0 ? -1 : 1;\r\n}\r\nfunction log(x, b) {\r\n  return Math.log(x) / Math.log(b);\r\n}\r\nvar pow = Math.pow;\r\n\r\nfunction frnd(range) {\r\n  return Math.random() * range;\r\n}\r\n\r\nfunction rndr(from, to) {\r\n  return Math.random() * (to - from) + from;\r\n}\r\n\r\nfunction rnd(max) {\r\n  return Math.floor(Math.random() * (max + 1));\r\n}\r\n\r\n/*** Import/export functions ***/\r\n\r\n// http://stackoverflow.com/questions/3096646/how-to-convert-a-floating-point-number-to-its-binary-representation-ieee-754-i\r\nfunction assembleFloat(sign, exponent, mantissa) {\r\n  return (sign << 31) | (exponent << 23) | mantissa;\r\n}\r\n\r\nfunction floatToNumber(flt) {\r\n  if (isNaN(flt))\r\n    // Special case: NaN\r\n    return assembleFloat(0, 0xff, 0x1337); // Mantissa is nonzero for NaN\r\n\r\n  var sign = flt < 0 ? 1 : 0;\r\n  flt = Math.abs(flt);\r\n  if (flt == 0.0)\r\n    // Special case: +-0\r\n    return assembleFloat(sign, 0, 0);\r\n\r\n  var exponent = Math.floor(Math.log(flt) / Math.LN2);\r\n  if (exponent > 127 || exponent < -126)\r\n    // Special case: +-Infinity (and huge numbers)\r\n    return assembleFloat(sign, 0xff, 0); // Mantissa is zero for +-Infinity\r\n\r\n  var mantissa = flt / Math.pow(2, exponent);\r\n  return assembleFloat(sign, exponent + 127, (mantissa * Math.pow(2, 23)) & 0x7fffff);\r\n}\r\n\r\n// http://stackoverflow.com/a/16001019\r\nfunction numberToFloat(bytes) {\r\n  var sign = bytes & 0x80000000 ? -1 : 1;\r\n  var exponent = ((bytes >> 23) & 0xff) - 127;\r\n  var significand = bytes & ~(-1 << 23);\r\n\r\n  if (exponent == 128) return sign * (significand ? Number.NaN : Number.POSITIVE_INFINITY);\r\n\r\n  if (exponent == -127) {\r\n    if (significand == 0) return sign * 0.0;\r\n    exponent = -126;\r\n    significand /= 1 << 22;\r\n  } else significand = (significand | (1 << 23)) / (1 << 23);\r\n\r\n  return sign * significand * Math.pow(2, exponent);\r\n}\r\n\r\n// export parameter list to URL friendly base58 string\r\n// https://gist.github.com/diafygi/90a3e80ca1c2793220e5/\r\nvar b58alphabet = \"123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz\";\r\nvar params_order = [\r\n  \"wave_type\",\r\n  \"p_env_attack\",\r\n  \"p_env_sustain\",\r\n  \"p_env_punch\",\r\n  \"p_env_decay\",\r\n  \"p_base_freq\",\r\n  \"p_freq_limit\",\r\n  \"p_freq_ramp\",\r\n  \"p_freq_dramp\",\r\n  \"p_vib_strength\",\r\n  \"p_vib_speed\",\r\n  \"p_arp_mod\",\r\n  \"p_arp_speed\",\r\n  \"p_duty\",\r\n  \"p_duty_ramp\",\r\n  \"p_repeat_speed\",\r\n  \"p_pha_offset\",\r\n  \"p_pha_ramp\",\r\n  \"p_lpf_freq\",\r\n  \"p_lpf_ramp\",\r\n  \"p_lpf_resonance\",\r\n  \"p_hpf_freq\",\r\n  \"p_hpf_ramp\",\r\n];\r\n\r\nvar params_signed = [\r\n  \"p_freq_ramp\",\r\n  \"p_freq_dramp\",\r\n  \"p_arp_mod\",\r\n  \"p_duty_ramp\",\r\n  \"p_pha_offset\",\r\n  \"p_pha_ramp\",\r\n  \"p_lpf_ramp\",\r\n  \"p_hpf_ramp\",\r\n];\r\n\r\nParams.prototype.toB58 = function () {\r\n  var convert = [];\r\n  for (var pi in params_order) {\r\n    var p = params_order[pi];\r\n    if (p == \"wave_type\") {\r\n      convert.push(this[p]);\r\n    } else if (p.indexOf(\"p_\") == 0) {\r\n      var val = this[p];\r\n      val = floatToNumber(val);\r\n      convert.push(0xff & val);\r\n      convert.push(0xff & (val >> 8));\r\n      convert.push(0xff & (val >> 16));\r\n      convert.push(0xff & (val >> 24));\r\n    }\r\n  }\r\n  return (function (B, A) {\r\n    var d = [],\r\n      s = \"\",\r\n      i,\r\n      j,\r\n      c,\r\n      n;\r\n    for (i in B) {\r\n      (j = 0), (c = B[i]);\r\n      s += c || s.length ^ i ? \"\" : 1;\r\n      while (j in d || c) {\r\n        n = d[j];\r\n        n = n ? n * 256 + c : c;\r\n        c = (n / 58) | 0;\r\n        d[j] = n % 58;\r\n        j++;\r\n      }\r\n    }\r\n    while (j--) s += A[d[j]];\r\n    return s;\r\n  })(convert, b58alphabet);\r\n};\r\n\r\nParams.prototype.fromB58 = function (b58encoded) {\r\n  this.fromJSON(sfxr.b58decode(b58encoded));\r\n  return this;\r\n};\r\n\r\nParams.prototype.fromJSON = function (struct) {\r\n  for (var p in struct) {\r\n    if (struct.hasOwnProperty(p)) {\r\n      this[p] = struct[p];\r\n    }\r\n  }\r\n  return this;\r\n};\r\n\r\n/*** Presets ***/\r\n\r\n// These functions roll up random sounds appropriate to various\r\n// typical game events:\r\n\r\nParams.prototype.pickupCoin = function () {\r\n  this.wave_type = SAWTOOTH;\r\n  this.p_base_freq = 0.4 + frnd(0.5);\r\n  this.p_env_attack = 0;\r\n  this.p_env_sustain = frnd(0.1);\r\n  this.p_env_decay = 0.1 + frnd(0.4);\r\n  this.p_env_punch = 0.3 + frnd(0.3);\r\n  if (rnd(1)) {\r\n    this.p_arp_speed = 0.5 + frnd(0.2);\r\n    this.p_arp_mod = 0.2 + frnd(0.4);\r\n  }\r\n  return this;\r\n};\r\n\r\nParams.prototype.laserShoot = function () {\r\n  this.wave_type = rnd(2);\r\n  if (this.wave_type === SINE && rnd(1)) this.wave_type = rnd(1);\r\n  if (rnd(2) === 0) {\r\n    this.p_base_freq = 0.3 + frnd(0.6);\r\n    this.p_freq_limit = frnd(0.1);\r\n    this.p_freq_ramp = -0.35 - frnd(0.3);\r\n  } else {\r\n    this.p_base_freq = 0.5 + frnd(0.5);\r\n    this.p_freq_limit = this.p_base_freq - 0.2 - frnd(0.6);\r\n    if (this.p_freq_limit < 0.2) this.p_freq_limit = 0.2;\r\n    this.p_freq_ramp = -0.15 - frnd(0.2);\r\n  }\r\n  if (this.wave_type === SAWTOOTH) this.p_duty = 1;\r\n  if (rnd(1)) {\r\n    this.p_duty = frnd(0.5);\r\n    this.p_duty_ramp = frnd(0.2);\r\n  } else {\r\n    this.p_duty = 0.4 + frnd(0.5);\r\n    this.p_duty_ramp = -frnd(0.7);\r\n  }\r\n  this.p_env_attack = 0;\r\n  this.p_env_sustain = 0.1 + frnd(0.2);\r\n  this.p_env_decay = frnd(0.4);\r\n  if (rnd(1)) this.p_env_punch = frnd(0.3);\r\n  if (rnd(2) === 0) {\r\n    this.p_pha_offset = frnd(0.2);\r\n    this.p_pha_ramp = -frnd(0.2);\r\n  }\r\n  //if (rnd(1))\r\n  this.p_hpf_freq = frnd(0.3);\r\n\r\n  return this;\r\n};\r\n\r\nParams.prototype.explosion = function () {\r\n  this.wave_type = NOISE;\r\n  if (rnd(1)) {\r\n    this.p_base_freq = sqr(0.1 + frnd(0.4));\r\n    this.p_freq_ramp = -0.1 + frnd(0.4);\r\n  } else {\r\n    this.p_base_freq = sqr(0.2 + frnd(0.7));\r\n    this.p_freq_ramp = -0.2 - frnd(0.2);\r\n  }\r\n  if (rnd(4) === 0) this.p_freq_ramp = 0;\r\n  if (rnd(2) === 0) this.p_repeat_speed = 0.3 + frnd(0.5);\r\n  this.p_env_attack = 0;\r\n  this.p_env_sustain = 0.1 + frnd(0.3);\r\n  this.p_env_decay = frnd(0.5);\r\n  if (rnd(1)) {\r\n    this.p_pha_offset = -0.3 + frnd(0.9);\r\n    this.p_pha_ramp = -frnd(0.3);\r\n  }\r\n  this.p_env_punch = 0.2 + frnd(0.6);\r\n  if (rnd(1)) {\r\n    this.p_vib_strength = frnd(0.7);\r\n    this.p_vib_speed = frnd(0.6);\r\n  }\r\n  if (rnd(2) === 0) {\r\n    this.p_arp_speed = 0.6 + frnd(0.3);\r\n    this.p_arp_mod = 0.8 - frnd(1.6);\r\n  }\r\n\r\n  return this;\r\n};\r\n\r\nParams.prototype.powerUp = function () {\r\n  if (rnd(1)) {\r\n    this.wave_type = SAWTOOTH;\r\n    this.p_duty = 1;\r\n  } else {\r\n    this.p_duty = frnd(0.6);\r\n  }\r\n  this.p_base_freq = 0.2 + frnd(0.3);\r\n  if (rnd(1)) {\r\n    this.p_freq_ramp = 0.1 + frnd(0.4);\r\n    this.p_repeat_speed = 0.4 + frnd(0.4);\r\n  } else {\r\n    this.p_freq_ramp = 0.05 + frnd(0.2);\r\n    if (rnd(1)) {\r\n      this.p_vib_strength = frnd(0.7);\r\n      this.p_vib_speed = frnd(0.6);\r\n    }\r\n  }\r\n  this.p_env_attack = 0;\r\n  this.p_env_sustain = frnd(0.4);\r\n  this.p_env_decay = 0.1 + frnd(0.4);\r\n\r\n  return this;\r\n};\r\n\r\nParams.prototype.hitHurt = function () {\r\n  this.wave_type = rnd(2);\r\n  if (this.wave_type === SINE) this.wave_type = NOISE;\r\n  if (this.wave_type === SQUARE) this.p_duty = frnd(0.6);\r\n  if (this.wave_type === SAWTOOTH) this.p_duty = 1;\r\n  this.p_base_freq = 0.2 + frnd(0.6);\r\n  this.p_freq_ramp = -0.3 - frnd(0.4);\r\n  this.p_env_attack = 0;\r\n  this.p_env_sustain = frnd(0.1);\r\n  this.p_env_decay = 0.1 + frnd(0.2);\r\n  if (rnd(1)) this.p_hpf_freq = frnd(0.3);\r\n  return this;\r\n};\r\n\r\nParams.prototype.jump = function () {\r\n  this.wave_type = SQUARE;\r\n  this.p_duty = frnd(0.6);\r\n  this.p_base_freq = 0.3 + frnd(0.3);\r\n  this.p_freq_ramp = 0.1 + frnd(0.2);\r\n  this.p_env_attack = 0;\r\n  this.p_env_sustain = 0.1 + frnd(0.3);\r\n  this.p_env_decay = 0.1 + frnd(0.2);\r\n  if (rnd(1)) this.p_hpf_freq = frnd(0.3);\r\n  if (rnd(1)) this.p_lpf_freq = 1 - frnd(0.6);\r\n  return this;\r\n};\r\n\r\nParams.prototype.blipSelect = function () {\r\n  this.wave_type = rnd(1);\r\n  if (this.wave_type === SQUARE) this.p_duty = frnd(0.6);\r\n  else this.p_duty = 1;\r\n  this.p_base_freq = 0.2 + frnd(0.4);\r\n  this.p_env_attack = 0;\r\n  this.p_env_sustain = 0.1 + frnd(0.1);\r\n  this.p_env_decay = frnd(0.2);\r\n  this.p_hpf_freq = 0.1;\r\n  return this;\r\n};\r\n\r\nParams.prototype.synth = function () {\r\n  this.wave_type = rnd(1);\r\n  this.p_base_freq = [0.2723171360931539, 0.19255692561524382, 0.13615778746815113][rnd(2)];\r\n  this.p_env_attack = rnd(4) > 3 ? frnd(0.5) : 0;\r\n  this.p_env_sustain = frnd(1);\r\n  this.p_env_punch = frnd(1);\r\n  this.p_env_decay = frnd(0.9) + 0.1;\r\n  this.p_arp_mod = [0, 0, 0, 0, -0.3162, 0.7454, 0.7454][rnd(6)];\r\n  this.p_arp_speed = frnd(0.5) + 0.4;\r\n  this.p_duty = frnd(1);\r\n  this.p_duty_ramp = rnd(2) == 2 ? frnd(1) : 0;\r\n  this.p_lpf_freq = [1, 0.9 * frnd(1) * frnd(1) + 0.1][rnd(1)];\r\n  this.p_lpf_ramp = rndr(-1, 1);\r\n  this.p_lpf_resonance = frnd(1);\r\n  this.p_hpf_freq = rnd(3) == 3 ? frnd(1) : 0;\r\n  this.p_hpf_ramp = rnd(3) == 3 ? frnd(1) : 0;\r\n  return this;\r\n};\r\n\r\nParams.prototype.tone = function () {\r\n  this.wave_type = SINE;\r\n  this.p_base_freq = 0.35173364; // 440 Hz\r\n  this.p_env_attack = 0;\r\n  this.p_env_sustain = 0.6641; // 1 sec\r\n  this.p_env_decay = 0;\r\n  this.p_env_punch = 0;\r\n  return this;\r\n};\r\n\r\nParams.prototype.click = function () {\r\n  const base = [\"explosion\", \"hitHurt\"][rnd(1)];\r\n  this[base]();\r\n  if (rnd(1)) {\r\n    this.p_freq_ramp = -0.5 + frnd(1.0);\r\n  }\r\n  if (rnd(1)) {\r\n    this.p_env_sustain = (frnd(0.4) + 0.2) * this.p_env_sustain;\r\n    this.p_env_decay = (frnd(0.4) + 0.2) * this.p_env_decay;\r\n  }\r\n  if (rnd(3) == 0) {\r\n    this.p_env_attack = frnd(0.3);\r\n  }\r\n  this.p_base_freq = 1 - frnd(0.25);\r\n  this.p_hpf_freq = 1 - frnd(0.1);\r\n  return this;\r\n};\r\n\r\nParams.prototype.random = function () {\r\n  this.wave_type = rnd(3);\r\n  if (rnd(1)) this.p_base_freq = cube(frnd(2) - 1) + 0.5;\r\n  else this.p_base_freq = sqr(frnd(1));\r\n  this.p_freq_limit = 0;\r\n  this.p_freq_ramp = Math.pow(frnd(2) - 1, 5);\r\n  if (this.p_base_freq > 0.7 && this.p_freq_ramp > 0.2) this.p_freq_ramp = -this.p_freq_ramp;\r\n  if (this.p_base_freq < 0.2 && this.p_freq_ramp < -0.05) this.p_freq_ramp = -this.p_freq_ramp;\r\n  this.p_freq_dramp = Math.pow(frnd(2) - 1, 3);\r\n  this.p_duty = frnd(2) - 1;\r\n  this.p_duty_ramp = Math.pow(frnd(2) - 1, 3);\r\n  this.p_vib_strength = Math.pow(frnd(2) - 1, 3);\r\n  this.p_vib_speed = rndr(-1, 1);\r\n  this.p_env_attack = cube(rndr(-1, 1));\r\n  this.p_env_sustain = sqr(rndr(-1, 1));\r\n  this.p_env_decay = rndr(-1, 1);\r\n  this.p_env_punch = Math.pow(frnd(0.8), 2);\r\n  if (this.p_env_attack + this.p_env_sustain + this.p_env_decay < 0.2) {\r\n    this.p_env_sustain += 0.2 + frnd(0.3);\r\n    this.p_env_decay += 0.2 + frnd(0.3);\r\n  }\r\n  this.p_lpf_resonance = rndr(-1, 1);\r\n  this.p_lpf_freq = 1 - Math.pow(frnd(1), 3);\r\n  this.p_lpf_ramp = Math.pow(frnd(2) - 1, 3);\r\n  if (this.p_lpf_freq < 0.1 && this.p_lpf_ramp < -0.05) this.p_lpf_ramp = -this.p_lpf_ramp;\r\n  this.p_hpf_freq = Math.pow(frnd(1), 5);\r\n  this.p_hpf_ramp = Math.pow(frnd(2) - 1, 5);\r\n  this.p_pha_offset = Math.pow(frnd(2) - 1, 3);\r\n  this.p_pha_ramp = Math.pow(frnd(2) - 1, 3);\r\n  this.p_repeat_speed = frnd(2) - 1;\r\n  this.p_arp_speed = frnd(2) - 1;\r\n  this.p_arp_mod = frnd(2) - 1;\r\n  return this;\r\n};\r\n\r\nParams.prototype.mutate = function () {\r\n  if (rnd(1)) this.p_base_freq += frnd(0.1) - 0.05;\r\n  if (rnd(1)) this.p_freq_ramp += frnd(0.1) - 0.05;\r\n  if (rnd(1)) this.p_freq_dramp += frnd(0.1) - 0.05;\r\n  if (rnd(1)) this.p_duty += frnd(0.1) - 0.05;\r\n  if (rnd(1)) this.p_duty_ramp += frnd(0.1) - 0.05;\r\n  if (rnd(1)) this.p_vib_strength += frnd(0.1) - 0.05;\r\n  if (rnd(1)) this.p_vib_speed += frnd(0.1) - 0.05;\r\n  if (rnd(1)) this.p_vib_delay += frnd(0.1) - 0.05;\r\n  if (rnd(1)) this.p_env_attack += frnd(0.1) - 0.05;\r\n  if (rnd(1)) this.p_env_sustain += frnd(0.1) - 0.05;\r\n  if (rnd(1)) this.p_env_decay += frnd(0.1) - 0.05;\r\n  if (rnd(1)) this.p_env_punch += frnd(0.1) - 0.05;\r\n  if (rnd(1)) this.p_lpf_resonance += frnd(0.1) - 0.05;\r\n  if (rnd(1)) this.p_lpf_freq += frnd(0.1) - 0.05;\r\n  if (rnd(1)) this.p_lpf_ramp += frnd(0.1) - 0.05;\r\n  if (rnd(1)) this.p_hpf_freq += frnd(0.1) - 0.05;\r\n  if (rnd(1)) this.p_hpf_ramp += frnd(0.1) - 0.05;\r\n  if (rnd(1)) this.p_pha_offset += frnd(0.1) - 0.05;\r\n  if (rnd(1)) this.p_pha_ramp += frnd(0.1) - 0.05;\r\n  if (rnd(1)) this.p_repeat_speed += frnd(0.1) - 0.05;\r\n  if (rnd(1)) this.p_arp_speed += frnd(0.1) - 0.05;\r\n  if (rnd(1)) this.p_arp_mod += frnd(0.1) - 0.05;\r\n  return this;\r\n};\r\n\r\n/*** Simpler namespaced functional API ***/\r\nvar sfxr;\r\nexport default sfxr = {};\r\n\r\nsfxr.toBuffer = function (synthdef) {\r\n  return new SoundEffect(synthdef).getRawBuffer()[\"buffer\"];\r\n};\r\n\r\nsfxr.toWebAudio = function (synthdef, audiocontext) {\r\n  var sfx = new SoundEffect(synthdef);\r\n  var buffer = sfx.getRawBuffer()[\"normalized\"];\r\n  if (audiocontext) {\r\n    var buff = audiocontext.createBuffer(1, buffer.length, sfx.sampleRate);\r\n    var nowBuffering = buff.getChannelData(0);\r\n    for (var i = 0; i < buffer.length; i++) {\r\n      nowBuffering[i] = buffer[i];\r\n    }\r\n    var proc = audiocontext.createBufferSource();\r\n    proc.buffer = buff;\r\n    return proc;\r\n  }\r\n};\r\n\r\nsfxr.toWave = function (synthdef) {\r\n  return new SoundEffect(synthdef).generate();\r\n};\r\n\r\nsfxr.toAudio = function (synthdef) {\r\n  return sfxr.toWave(synthdef).getAudio();\r\n};\r\n\r\nsfxr.play = function (synthdef) {\r\n  return sfxr.toAudio(synthdef).play();\r\n};\r\n\r\nsfxr.b58decode = function (b58encoded) {\r\n  var decoded = (function (S, A) {\r\n    var d = [],\r\n      b = [],\r\n      i,\r\n      j,\r\n      c,\r\n      n;\r\n    for (i in S) {\r\n      (j = 0), (c = A.indexOf(S[i]));\r\n      if (c < 0) return undefined;\r\n      c || b.length ^ i ? i : b.push(0);\r\n      while (j in d || c) {\r\n        n = d[j];\r\n        n = n ? n * 58 + c : c;\r\n        c = n >> 8;\r\n        d[j] = n % 256;\r\n        j++;\r\n      }\r\n    }\r\n    while (j--) b.push(d[j]);\r\n    return new Uint8Array(b);\r\n  })(b58encoded, b58alphabet);\r\n  var result = {};\r\n  for (var pi in params_order) {\r\n    var p = params_order[pi];\r\n    var offset = (pi - 1) * 4 + 1;\r\n    if (p == \"wave_type\") {\r\n      result[p] = decoded[0];\r\n    } else {\r\n      var val = decoded[offset] | (decoded[offset + 1] << 8) | (decoded[offset + 2] << 16) | (decoded[offset + 3] << 24);\r\n      result[p] = numberToFloat(val);\r\n    }\r\n  }\r\n  return result;\r\n};\r\n\r\nsfxr.b58encode = function (synthdef) {\r\n  var p = new Params();\r\n  p.fromJSON(synthdef);\r\n  return p.toB58();\r\n};\r\n\r\nsfxr.generate = function (algorithm, options) {\r\n  const p = new Params();\r\n  const opts = options || {};\r\n  p.sound_vol = opts[\"sound_vol\"] || 0.25;\r\n  p.sample_rate = opts[\"sample_rate\"] || 44100;\r\n  p.sample_size = opts[\"sample_size\"] || 8;\r\n  return p[algorithm]();\r\n};\r\n\r\n/*** Main entry point ***/\r\n\r\nfunction SoundEffect(ps) {\r\n  if (typeof ps == \"string\") {\r\n    var PARAMS = new Params();\r\n    if (ps.indexOf(\"#\") == 0) {\r\n      ps = ps.slice(1);\r\n    }\r\n    ps = PARAMS.fromB58(ps);\r\n  }\r\n  this.init(ps);\r\n}\r\n\r\nSoundEffect.prototype.init = function (ps) {\r\n  this.parameters = ps;\r\n  this.initForRepeat(); // First time through, this is a bit of a misnomer\r\n\r\n  // Waveform shape\r\n  this.waveShape = parseInt(ps.wave_type);\r\n\r\n  // Filter\r\n  this.fltw = Math.pow(ps.p_lpf_freq, 3) * 0.1;\r\n  this.enableLowPassFilter = ps.p_lpf_freq != 1;\r\n  this.fltw_d = 1 + ps.p_lpf_ramp * 0.0001;\r\n  this.fltdmp = (5 / (1 + Math.pow(ps.p_lpf_resonance, 2) * 20)) * (0.01 + this.fltw);\r\n  if (this.fltdmp > 0.8) this.fltdmp = 0.8;\r\n  this.flthp = Math.pow(ps.p_hpf_freq, 2) * 0.1;\r\n  this.flthp_d = 1 + ps.p_hpf_ramp * 0.0003;\r\n\r\n  // Vibrato\r\n  this.vibratoSpeed = Math.pow(ps.p_vib_speed, 2) * 0.01;\r\n  this.vibratoAmplitude = ps.p_vib_strength * 0.5;\r\n\r\n  // Envelope\r\n  this.envelopeLength = [\r\n    Math.floor(ps.p_env_attack * ps.p_env_attack * 100000),\r\n    Math.floor(ps.p_env_sustain * ps.p_env_sustain * 100000),\r\n    Math.floor(ps.p_env_decay * ps.p_env_decay * 100000),\r\n  ];\r\n  this.envelopePunch = ps.p_env_punch;\r\n\r\n  // Flanger\r\n  this.flangerOffset = Math.pow(ps.p_pha_offset, 2) * 1020;\r\n  if (ps.p_pha_offset < 0) this.flangerOffset = -this.flangerOffset;\r\n  this.flangerOffsetSlide = Math.pow(ps.p_pha_ramp, 2) * 1;\r\n  if (ps.p_pha_ramp < 0) this.flangerOffsetSlide = -this.flangerOffsetSlide;\r\n\r\n  // Repeat\r\n  this.repeatTime = Math.floor(Math.pow(1 - ps.p_repeat_speed, 2) * 20000 + 32);\r\n  if (ps.p_repeat_speed === 0) this.repeatTime = 0;\r\n\r\n  this.gain = Math.exp(ps.sound_vol) - 1;\r\n\r\n  this.sampleRate = ps.sample_rate;\r\n  this.bitsPerChannel = ps.sample_size;\r\n};\r\n\r\nSoundEffect.prototype.initForRepeat = function () {\r\n  var ps = this.parameters;\r\n  this.elapsedSinceRepeat = 0;\r\n\r\n  this.period = 100 / (ps.p_base_freq * ps.p_base_freq + 0.001);\r\n  this.periodMax = 100 / (ps.p_freq_limit * ps.p_freq_limit + 0.001);\r\n  this.enableFrequencyCutoff = ps.p_freq_limit > 0;\r\n  this.periodMult = 1 - Math.pow(ps.p_freq_ramp, 3) * 0.01;\r\n  this.periodMultSlide = -Math.pow(ps.p_freq_dramp, 3) * 0.000001;\r\n\r\n  this.dutyCycle = 0.5 - ps.p_duty * 0.5;\r\n  this.dutyCycleSlide = -ps.p_duty_ramp * 0.00005;\r\n\r\n  if (ps.p_arp_mod >= 0) this.arpeggioMultiplier = 1 - Math.pow(ps.p_arp_mod, 2) * 0.9;\r\n  else this.arpeggioMultiplier = 1 + Math.pow(ps.p_arp_mod, 2) * 10;\r\n  this.arpeggioTime = Math.floor(Math.pow(1 - ps.p_arp_speed, 2) * 20000 + 32);\r\n  if (ps.p_arp_speed === 1) this.arpeggioTime = 0;\r\n};\r\n\r\nSoundEffect.prototype.getRawBuffer = function () {\r\n  var fltp = 0;\r\n  var fltdp = 0;\r\n  var fltphp = 0;\r\n\r\n  var noise_buffer = Array(32);\r\n  for (var i = 0; i < 32; ++i) noise_buffer[i] = Math.random() * 2 - 1;\r\n\r\n  var envelopeStage = 0;\r\n  var envelopeElapsed = 0;\r\n\r\n  var vibratoPhase = 0;\r\n\r\n  var phase = 0;\r\n  var ipp = 0;\r\n  var flanger_buffer = Array(1024);\r\n  for (var i = 0; i < 1024; ++i) flanger_buffer[i] = 0;\r\n\r\n  var num_clipped = 0;\r\n\r\n  var buffer = [];\r\n  var normalized = [];\r\n\r\n  var sample_sum = 0;\r\n  var num_summed = 0;\r\n  var summands = Math.floor(44100 / this.sampleRate);\r\n\r\n  for (var t = 0; ; ++t) {\r\n    // Repeats\r\n    if (this.repeatTime != 0 && ++this.elapsedSinceRepeat >= this.repeatTime) this.initForRepeat();\r\n\r\n    // Arpeggio (single)\r\n    if (this.arpeggioTime != 0 && t >= this.arpeggioTime) {\r\n      this.arpeggioTime = 0;\r\n      this.period *= this.arpeggioMultiplier;\r\n    }\r\n\r\n    // Frequency slide, and frequency slide slide!\r\n    this.periodMult += this.periodMultSlide;\r\n    this.period *= this.periodMult;\r\n    if (this.period > this.periodMax) {\r\n      this.period = this.periodMax;\r\n      if (this.enableFrequencyCutoff) break;\r\n    }\r\n\r\n    // Vibrato\r\n    var rfperiod = this.period;\r\n    if (this.vibratoAmplitude > 0) {\r\n      vibratoPhase += this.vibratoSpeed;\r\n      rfperiod = this.period * (1 + Math.sin(vibratoPhase) * this.vibratoAmplitude);\r\n    }\r\n    var iperiod = Math.floor(rfperiod);\r\n    if (iperiod < OVERSAMPLING) iperiod = OVERSAMPLING;\r\n\r\n    // Square wave duty cycle\r\n    this.dutyCycle += this.dutyCycleSlide;\r\n    if (this.dutyCycle < 0) this.dutyCycle = 0;\r\n    if (this.dutyCycle > 0.5) this.dutyCycle = 0.5;\r\n\r\n    // Volume envelope\r\n    if (++envelopeElapsed > this.envelopeLength[envelopeStage]) {\r\n      envelopeElapsed = 0;\r\n      if (++envelopeStage > 2) break;\r\n    }\r\n    var env_vol;\r\n    var envf = envelopeElapsed / this.envelopeLength[envelopeStage];\r\n    if (envelopeStage === 0) {\r\n      // Attack\r\n      env_vol = envf;\r\n    } else if (envelopeStage === 1) {\r\n      // Sustain\r\n      env_vol = 1 + (1 - envf) * 2 * this.envelopePunch;\r\n    } else {\r\n      // Decay\r\n      env_vol = 1 - envf;\r\n    }\r\n\r\n    // Flanger step\r\n    this.flangerOffset += this.flangerOffsetSlide;\r\n    var iphase = Math.abs(Math.floor(this.flangerOffset));\r\n    if (iphase > 1023) iphase = 1023;\r\n\r\n    if (this.flthp_d != 0) {\r\n      this.flthp *= this.flthp_d;\r\n      if (this.flthp < 0.00001) this.flthp = 0.00001;\r\n      if (this.flthp > 0.1) this.flthp = 0.1;\r\n    }\r\n\r\n    // 8x oversampling\r\n    var sample = 0;\r\n    for (var si = 0; si < OVERSAMPLING; ++si) {\r\n      var sub_sample = 0;\r\n      phase++;\r\n      if (phase >= iperiod) {\r\n        phase %= iperiod;\r\n        if (this.waveShape === NOISE) for (var i = 0; i < 32; ++i) noise_buffer[i] = Math.random() * 2 - 1;\r\n      }\r\n\r\n      // Base waveform\r\n      var fp = phase / iperiod;\r\n      if (this.waveShape === SQUARE) {\r\n        if (fp < this.dutyCycle) sub_sample = 0.5;\r\n        else sub_sample = -0.5;\r\n      } else if (this.waveShape === SAWTOOTH) {\r\n        if (fp < this.dutyCycle) sub_sample = -1 + (2 * fp) / this.dutyCycle;\r\n        else sub_sample = 1 - (2 * (fp - this.dutyCycle)) / (1 - this.dutyCycle);\r\n      } else if (this.waveShape === SINE) {\r\n        sub_sample = Math.sin(fp * 2 * Math.PI);\r\n      } else if (this.waveShape === NOISE) {\r\n        sub_sample = noise_buffer[Math.floor((phase * 32) / iperiod)];\r\n      } else {\r\n        throw \"ERROR: Bad wave type: \" + this.waveShape;\r\n      }\r\n\r\n      // Low-pass filter\r\n      var pp = fltp;\r\n      this.fltw *= this.fltw_d;\r\n      if (this.fltw < 0) this.fltw = 0;\r\n      if (this.fltw > 0.1) this.fltw = 0.1;\r\n      if (this.enableLowPassFilter) {\r\n        fltdp += (sub_sample - fltp) * this.fltw;\r\n        fltdp -= fltdp * this.fltdmp;\r\n      } else {\r\n        fltp = sub_sample;\r\n        fltdp = 0;\r\n      }\r\n      fltp += fltdp;\r\n\r\n      // High-pass filter\r\n      fltphp += fltp - pp;\r\n      fltphp -= fltphp * this.flthp;\r\n      sub_sample = fltphp;\r\n\r\n      // Flanger\r\n      flanger_buffer[ipp & 1023] = sub_sample;\r\n      sub_sample += flanger_buffer[(ipp - iphase + 1024) & 1023];\r\n      ipp = (ipp + 1) & 1023;\r\n\r\n      // final accumulation and envelope application\r\n      sample += sub_sample * env_vol;\r\n    }\r\n\r\n    // Accumulate samples appropriately for sample rate\r\n    sample_sum += sample;\r\n    if (++num_summed >= summands) {\r\n      num_summed = 0;\r\n      sample = sample_sum / summands;\r\n      sample_sum = 0;\r\n    } else {\r\n      continue;\r\n    }\r\n\r\n    sample = (sample / OVERSAMPLING) * masterVolume;\r\n    sample *= this.gain;\r\n\r\n    // store the original normalized floating point sample\r\n    normalized.push(sample);\r\n\r\n    if (this.bitsPerChannel === 8) {\r\n      // Rescale [-1, 1) to [0, 256)\r\n      sample = Math.floor((sample + 1) * 128);\r\n      if (sample > 255) {\r\n        sample = 255;\r\n        ++num_clipped;\r\n      } else if (sample < 0) {\r\n        sample = 0;\r\n        ++num_clipped;\r\n      }\r\n      buffer.push(sample);\r\n    } else {\r\n      // Rescale [-1, 1) to [-32768, 32768)\r\n      sample = Math.floor(sample * (1 << 15));\r\n      if (sample >= 1 << 15) {\r\n        sample = (1 << 15) - 1;\r\n        ++num_clipped;\r\n      } else if (sample < -(1 << 15)) {\r\n        sample = -(1 << 15);\r\n        ++num_clipped;\r\n      }\r\n      buffer.push(sample & 0xff);\r\n      buffer.push((sample >> 8) & 0xff);\r\n    }\r\n  }\r\n\r\n  return {\r\n    buffer: buffer,\r\n    normalized: normalized,\r\n    clipped: num_clipped,\r\n  };\r\n};\r\n\r\nSoundEffect.prototype.generate = function () {\r\n  var rendered = this.getRawBuffer();\r\n  var wave = new RIFFWAVE();\r\n  wave.header.sampleRate = this.sampleRate;\r\n  wave.header.bitsPerSample = this.bitsPerChannel;\r\n  wave.Make(rendered.buffer);\r\n  wave.clipping = rendered.clipped;\r\n  wave.buffer = rendered.normalized;\r\n  wave.getAudio = _sfxr_getAudioFn(wave);\r\n  return wave;\r\n};\r\n\r\nvar _actx = null;\r\nvar _sfxr_getAudioFn = function (wave) {\r\n  return function () {\r\n    // check for procedural audio\r\n    var actx = null;\r\n    if (!_actx) {\r\n      if (\"AudioContext\" in window) {\r\n        _actx = new AudioContext();\r\n      } else if (\"webkitAudioContext\" in window) {\r\n        _actx = new webkitAudioContext();\r\n      }\r\n    }\r\n    actx = _actx;\r\n\r\n    if (actx) {\r\n      var buff = actx.createBuffer(1, wave.buffer.length, wave.header.sampleRate);\r\n      var nowBuffering = buff.getChannelData(0);\r\n      for (var i = 0; i < wave.buffer.length; i++) {\r\n        nowBuffering[i] = wave.buffer[i];\r\n      }\r\n      var volume = 1.0;\r\n      var obj = {\r\n        channels: [],\r\n        setVolume: function (v) {\r\n          volume = v;\r\n          return obj;\r\n        },\r\n        play: function () {\r\n          var proc = actx.createBufferSource();\r\n          proc.buffer = buff;\r\n          var gainNode = actx.createGain();\r\n          gainNode.gain.value = volume;\r\n          gainNode.connect(actx.destination);\r\n          proc.connect(gainNode);\r\n          if (proc[\"start\"]) {\r\n            proc.start();\r\n          } else if (proc[\"noteOn\"]) {\r\n            proc.noteOn(0);\r\n          }\r\n          this.channels.push(proc);\r\n          return proc;\r\n        },\r\n      };\r\n      return obj;\r\n    } else {\r\n      var audio = new Audio();\r\n      audio.src = wave.dataURI;\r\n      return audio;\r\n    }\r\n  };\r\n};\r\n\r\n/*** conversions from slider values, internal, and units ***/\r\n\r\n// convert from slider values to internal representation\r\n\r\nvar sliders = {\r\n  p_env_attack: function (v) {\r\n    return v * v * 100000.0;\r\n  },\r\n  p_env_sustain: function (v) {\r\n    return v * v * 100000.0;\r\n  },\r\n  p_env_punch: function (v) {\r\n    return v;\r\n  },\r\n  p_env_decay: function (v) {\r\n    return v * v * 100000.0;\r\n  },\r\n\r\n  p_base_freq: function (v) {\r\n    return (8 * 44100 * (v * v + 0.001)) / 100;\r\n  },\r\n  p_freq_limit: function (v) {\r\n    return (8 * 44100 * (v * v + 0.001)) / 100;\r\n  },\r\n  p_freq_ramp: function (v) {\r\n    return 1.0 - Math.pow(v, 3.0) * 0.01;\r\n  },\r\n  p_freq_dramp: function (v) {\r\n    return -Math.pow(v, 3.0) * 0.000001;\r\n  },\r\n\r\n  p_vib_speed: function (v) {\r\n    return Math.pow(v, 2.0) * 0.01;\r\n  },\r\n  p_vib_strength: function (v) {\r\n    return v * 0.5;\r\n  },\r\n\r\n  p_arp_mod: function (v) {\r\n    return v >= 0 ? 1.0 - Math.pow(v, 2) * 0.9 : 1.0 + Math.pow(v, 2) * 10;\r\n  },\r\n  p_arp_speed: function (v) {\r\n    return v === 1.0 ? 0 : Math.floor(Math.pow(1.0 - v, 2.0) * 20000 + 32);\r\n  },\r\n\r\n  p_duty: function (v) {\r\n    return 0.5 - v * 0.5;\r\n  },\r\n  p_duty_ramp: function (v) {\r\n    return -v * 0.00005;\r\n  },\r\n\r\n  p_repeat_speed: function (v) {\r\n    return v === 0 ? 0 : Math.floor(Math.pow(1 - v, 2) * 20000) + 32;\r\n  },\r\n\r\n  p_pha_offset: function (v) {\r\n    return (v < 0 ? -1 : 1) * Math.pow(v, 2) * 1020;\r\n  },\r\n  p_pha_ramp: function (v) {\r\n    return (v < 0 ? -1 : 1) * Math.pow(v, 2);\r\n  },\r\n\r\n  p_lpf_freq: function (v) {\r\n    return Math.pow(v, 3) * 0.1;\r\n  },\r\n  p_lpf_ramp: function (v) {\r\n    return 1.0 + v * 0.0001;\r\n  },\r\n  p_lpf_resonance: function (v) {\r\n    return 5.0 / (1.0 + Math.pow(v, 2) * 20);\r\n  }, // * (0.01 + fltw);\r\n\r\n  p_hpf_freq: function (v) {\r\n    return Math.pow(v, 2) * 0.1;\r\n  },\r\n  p_hpf_ramp: function (v) {\r\n    return 1.0 + v * 0.0003;\r\n  },\r\n\r\n  sound_vol: function (v) {\r\n    return Math.exp(v) - 1;\r\n  },\r\n};\r\n\r\nvar sliders_inverse = {\r\n  p_env_attack: function (v) {\r\n    return Math.sqrt(v / 100000.0);\r\n  },\r\n  p_env_sustain: function (v) {\r\n    return Math.sqrt(v / 100000.0);\r\n  },\r\n  p_env_punch: function (v) {\r\n    return v;\r\n  },\r\n  p_env_decay: function (v) {\r\n    return Math.sqrt(v / 100000.0);\r\n  },\r\n\r\n  p_base_freq: function (v) {\r\n    return Math.sqrt((v * 100) / 8 / 44100 - 0.001);\r\n  },\r\n  p_freq_limit: function (v) {\r\n    return Math.sqrt((v * 100) / 8 / 44100 - 0.001);\r\n  },\r\n  p_freq_ramp: function (v) {\r\n    return Math.cbrt((1.0 - v) / 0.01);\r\n  },\r\n  p_freq_dramp: function (v) {\r\n    return Math.cbrt(v / -0.000001);\r\n  },\r\n\r\n  p_vib_speed: function (v) {\r\n    return Math.sqrt(v / 0.01);\r\n  },\r\n  p_vib_strength: function (v) {\r\n    return v / 0.5;\r\n  },\r\n\r\n  p_arp_mod: function (v) {\r\n    return v < 1 ? Math.sqrt((1.0 - v) / 0.9) : -Math.sqrt((v - 1.0) / 10.0);\r\n  },\r\n  p_arp_speed: function (v) {\r\n    return v === 0 ? 1.0 : 1.0 - Math.sqrt((v - (v < 100 ? 30 : 32)) / 20000);\r\n  },\r\n\r\n  p_duty: function (v) {\r\n    return (v - 0.5) / -0.5;\r\n  },\r\n  p_duty_ramp: function (v) {\r\n    return v / -0.00005;\r\n  },\r\n\r\n  p_repeat_speed: function (v) {\r\n    return v === 0 ? 0 : -(Math.sqrt((v - 32) / 20000) - 1.0);\r\n  },\r\n\r\n  p_pha_offset: function (v) {\r\n    return (v < 0 ? -1 : 1) * Math.sqrt(Math.abs(v) / 1020);\r\n  },\r\n  p_pha_ramp: function (v) {\r\n    return (v < 0 ? -1 : 1) * Math.sqrt(Math.abs(v));\r\n  },\r\n\r\n  p_lpf_freq: function (v) {\r\n    return Math.cbrt(v / 0.1);\r\n  },\r\n  p_lpf_ramp: function (v) {\r\n    return (v - 1.0) / 0.0001;\r\n  },\r\n  p_lpf_resonance: function (v) {\r\n    return Math.sqrt((1.0 / (v / 5.0) - 1) / 20);\r\n  },\r\n\r\n  p_hpf_freq: function (v) {\r\n    return Math.sqrt(v / 0.1);\r\n  },\r\n  p_hpf_ramp: function (v) {\r\n    return (v - 1.0) / 0.0003;\r\n  },\r\n  sound_vol: function (v) {\r\n    return Math.log(v + 1);\r\n  },\r\n};\r\n\r\n// convert from internal representation to domain value without units\r\n\r\nvar domain = {\r\n  p_env_attack: function (v) {\r\n    return v / 44100;\r\n  },\r\n  p_env_sustain: function (v) {\r\n    return v / 44100;\r\n  },\r\n  p_env_punch: function (v) {\r\n    return v * 100;\r\n  },\r\n  p_env_decay: function (v) {\r\n    return v / 44100;\r\n  },\r\n\r\n  p_base_freq: function (v) {\r\n    return v;\r\n  },\r\n  p_freq_limit: function (v) {\r\n    return v;\r\n  },\r\n  p_freq_ramp: function (v) {\r\n    return (44100 * Math.log(v)) / Math.log(0.5);\r\n  },\r\n  p_freq_dramp: function (v) {\r\n    return (v * 44100) / Math.pow(2, -44101 / 44100);\r\n  },\r\n\r\n  p_vib_speed: function (v) {\r\n    return (441000 / 64) * v;\r\n  },\r\n  p_vib_strength: function (v) {\r\n    return v * 100;\r\n  },\r\n\r\n  p_arp_mod: function (v) {\r\n    return 1 / v;\r\n  },\r\n  p_arp_speed: function (v) {\r\n    return v / 44100;\r\n  },\r\n\r\n  p_duty: function (v) {\r\n    return 100 * v;\r\n  },\r\n  p_duty_ramp: function (v) {\r\n    return 8 * 44100 * v;\r\n  },\r\n\r\n  p_repeat_speed: function (v) {\r\n    return v === 0 ? 0 : 44100 / v;\r\n  },\r\n\r\n  p_pha_offset: function (v) {\r\n    return (1000 * v) / 44100;\r\n  },\r\n  p_pha_ramp: function (v) {\r\n    return 1000 * v;\r\n  },\r\n\r\n  p_lpf_freq: function (v) {\r\n    return v === 0.1 ? 0 : (8 * 44100 * v) / (1 - v);\r\n  },\r\n  p_lpf_ramp: function (v) {\r\n    return Math.pow(v, 44100);\r\n  },\r\n  p_lpf_resonance: function (v) {\r\n    return 100 * (1 - v * 0.11);\r\n  },\r\n\r\n  p_hpf_freq: function (v) {\r\n    return (8 * 44100 * v) / (1 - v);\r\n  },\r\n  p_hpf_ramp: function (v) {\r\n    return Math.pow(v, 44100);\r\n  },\r\n\r\n  sound_vol: function (v) {\r\n    return (10 * Math.log(v * v)) / Math.log(10);\r\n  },\r\n};\r\n\r\nvar domain_inverse = {\r\n  p_env_attack: function (v) {\r\n    return v * 44100;\r\n  },\r\n  p_env_sustain: function (v) {\r\n    return v * 44100;\r\n  },\r\n  p_env_punch: function (v) {\r\n    return v / 100;\r\n  },\r\n  p_env_decay: function (v) {\r\n    return v * 44100;\r\n  },\r\n\r\n  p_base_freq: function (v) {\r\n    return v;\r\n  },\r\n  p_freq_limit: function (v) {\r\n    return v;\r\n  },\r\n  p_freq_ramp: function (v) {\r\n    return Math.exp((Math.log(0.5) * v) / 44100);\r\n  },\r\n  p_freq_dramp: function (v) {\r\n    return (v * Math.pow(2, -44101 / 44100)) / 44100;\r\n  },\r\n\r\n  p_vib_speed: function (v) {\r\n    return (64 / 441000) * v;\r\n  },\r\n  p_vib_strength: function (v) {\r\n    return v / 100;\r\n  },\r\n\r\n  p_arp_mod: function (v) {\r\n    return 1 / v;\r\n  },\r\n  p_arp_speed: function (v) {\r\n    return v * 44100;\r\n  },\r\n\r\n  p_duty: function (v) {\r\n    return v / 100;\r\n  },\r\n  p_duty_ramp: function (v) {\r\n    return v / (8 * 44100);\r\n  },\r\n\r\n  p_repeat_speed: function (v) {\r\n    return v <= 0 ? 0 : v > 1378 ? 32 : 44100 / v;\r\n  },\r\n\r\n  p_pha_offset: function (v) {\r\n    return (v / 1000) * 44100;\r\n  },\r\n  p_pha_ramp: function (v) {\r\n    return v / 1000;\r\n  },\r\n\r\n  p_lpf_freq: function (v) {\r\n    return v / (v + 8 * 44100);\r\n  },\r\n  p_lpf_ramp: function (v) {\r\n    return Math.pow(v, 1 / 44100);\r\n  },\r\n  p_lpf_resonance: function (v) {\r\n    return (1 - v / 100) / 0.11;\r\n  },\r\n\r\n  p_hpf_freq: function (v) {\r\n    return v / (v + 8 * 44100);\r\n  },\r\n  p_hpf_ramp: function (v) {\r\n    return Math.pow(v, 1 / 44100);\r\n  },\r\n\r\n  sound_vol: function (v) {\r\n    return Math.sqrt(Math.pow(10, v / 10));\r\n  },\r\n};\r\n\r\n// convert from internal representation to printable units\r\n\r\nvar units = {\r\n  p_env_attack: function (v) {\r\n    return (v / 44100).toPrecision(4) + \" sec\";\r\n  },\r\n  p_env_sustain: function (v) {\r\n    return (v / 44100).toPrecision(4) + \" sec\";\r\n  },\r\n  p_env_punch: function (v) {\r\n    return \"+\" + (v * 100).toPrecision(4) + \"%\";\r\n  },\r\n  p_env_decay: function (v) {\r\n    return (v / 44100).toPrecision(4) + \" sec\";\r\n  },\r\n\r\n  p_base_freq: function (v) {\r\n    return v.toPrecision(4) + \"Hz\";\r\n  },\r\n  p_freq_limit: function (v) {\r\n    return v.toPrecision(4) + \"Hz\";\r\n  },\r\n  p_freq_ramp: function (v) {\r\n    return ((44100 * Math.log(v)) / Math.log(0.5)).toPrecision(4) + \" 8va/sec\";\r\n  },\r\n  p_freq_dramp: function (v) {\r\n    return ((v * 44100) / Math.pow(2, -44101 / 44100)).toExponential(3) + \" 8va/s^2\";\r\n  },\r\n\r\n  p_vib_speed: function (v) {\r\n    return v === 0 ? \"OFF\" : ((441000 / 64) * v).toPrecision(4) + \" Hz\";\r\n  },\r\n  p_vib_strength: function (v) {\r\n    return v === 0 ? \"OFF\" : \"&plusmn; \" + (v * 100).toPrecision(4) + \"%\";\r\n  },\r\n\r\n  p_arp_mod: function (v) {\r\n    return v === 1 ? \"OFF\" : \"x \" + (1 / v).toPrecision(4);\r\n  },\r\n  p_arp_speed: function (v) {\r\n    return v === 0 ? \"OFF\" : (v / 44100).toPrecision(4) + \" sec\";\r\n  },\r\n\r\n  p_duty: function (v) {\r\n    return (100 * v).toPrecision(4) + \"%\";\r\n  },\r\n  p_duty_ramp: function (v) {\r\n    return (8 * 44100 * v).toPrecision(4) + \"%/sec\";\r\n  },\r\n\r\n  p_repeat_speed: function (v) {\r\n    return v === 0 ? \"OFF\" : (44100 / v).toPrecision(4) + \" Hz\";\r\n  },\r\n\r\n  p_pha_offset: function (v) {\r\n    return v === 0 ? \"OFF\" : ((1000 * v) / 44100).toPrecision(4) + \" msec\";\r\n  },\r\n  // Not so sure about this:\r\n  p_pha_ramp: function (v) {\r\n    return v === 0 ? \"OFF\" : (1000 * v).toPrecision(4) + \" msec/sec\";\r\n  },\r\n\r\n  p_lpf_freq: function (v) {\r\n    return v === 0.1 ? \"OFF\" : Math.round((8 * 44100 * v) / (1 - v)) + \" Hz\";\r\n  },\r\n  p_lpf_ramp: function (v) {\r\n    if (v === 1) return \"OFF\";\r\n    return Math.pow(v, 44100).toPrecision(4) + \" ^sec\";\r\n  },\r\n  p_lpf_resonance: function (v) {\r\n    return (100 * (1 - v * 0.11)).toPrecision(4) + \"%\";\r\n  },\r\n\r\n  p_hpf_freq: function (v) {\r\n    return v === 0 ? \"OFF\" : Math.round((8 * 44100 * v) / (1 - v)) + \" Hz\";\r\n  },\r\n  p_hpf_ramp: function (v) {\r\n    if (v === 1) return \"OFF\";\r\n    return Math.pow(v, 44100).toPrecision(4) + \" ^sec\";\r\n  },\r\n\r\n  sound_vol: function (v) {\r\n    v = (10 * Math.log(v * v)) / Math.log(10);\r\n    var sign = v >= 0 ? \"+\" : \"\";\r\n    return sign + v.toPrecision(4) + \" dB\";\r\n  },\r\n};\r\n\r\n/*** Plumbing ***/\r\n\r\n/* (function (root, factory) {\r\n  if (typeof define === \"function\" && define.amd) {\r\n    // Now we're wrapping the factory and assigning the return\r\n    // value to the root (window) and returning it as well to\r\n    // the AMD loader.\r\n    /*  define([\"./riffwave\"], function (RIFFWAVE) {\r\n      return (root.jsfxr = factory(RIFFWAVE));\r\n    }); \r\n  } else if (typeof module === \"object\" && module.exports) {\r\n    // I've not encountered a need for this yet, since I haven't\r\n    // run into a scenario where plain modules depend on CommonJS\r\n    // *and* I happen to be loading in a CJS browser environment\r\n    // but I'm including it for the sake of being thorough\r\n    //RIFFWAVE = require(\"./riffwave.mjs\");\r\n    module.exports = root.jsfxr = factory(RIFFWAVE);\r\n  }  else {\r\n    root.jsfxr = factory(root.RIFFWAVE);\r\n  } \r\n})(this, function (RIFFWAVE) {\r\n  // module code here....\r\n  return {\r\n    sfxr: sfxr,\r\n    convert: {\r\n      sliders: sliders,\r\n      domain: domain,\r\n      sliders_inverse: sliders_inverse,\r\n      domain_inverse: domain_inverse,\r\n      units: units,\r\n    },\r\n    parameters: {\r\n      order: params_order,\r\n      signed: params_signed,\r\n    },\r\n    Params: Params,\r\n    SoundEffect: SoundEffect,\r\n    waveforms: {\r\n      SQUARE: SQUARE,\r\n      SAWTOOTH: SAWTOOTH,\r\n      SINE: SINE,\r\n      NOISE: NOISE,\r\n    },\r\n  };\r\n});\r\n */\r\n","/*\r\n * RIFFWAVE.js v0.03 - Audio encoder for HTML5 <audio> elements.\r\n * Copyleft 2011 by Pedro Ladaria <pedro.ladaria at Gmail dot com>\r\n *\r\n * Public Domain\r\n *\r\n * Changelog:\r\n *\r\n * 0.01 - First release\r\n * 0.02 - New faster base64 encoding\r\n * 0.03 - Support for 16bit samples\r\n *\r\n * Notes:\r\n *\r\n * 8 bit data is unsigned: 0..255\r\n * 16 bit data is signed: -32,768..32,767\r\n *\r\n */\r\n\r\nlet FastBase64 = {\r\n  chars: \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\",\r\n  encLookup: [],\r\n\r\n  Init: function () {\r\n    for (var i = 0; i < 4096; i++) {\r\n      this.encLookup[i] = this.chars[i >> 6] + this.chars[i & 0x3f];\r\n    }\r\n  },\r\n\r\n  Encode: function (src) {\r\n    var len = src.length;\r\n    var dst = \"\";\r\n    var i = 0;\r\n    while (len > 2) {\r\n      let n = (src[i] << 16) | (src[i + 1] << 8) | src[i + 2];\r\n      dst += this.encLookup[n >> 12] + this.encLookup[n & 0xfff];\r\n      len -= 3;\r\n      i += 3;\r\n    }\r\n    if (len > 0) {\r\n      var n1 = (src[i] & 0xfc) >> 2;\r\n      var n2 = (src[i] & 0x03) << 4;\r\n      if (len > 1) n2 |= (src[++i] & 0xf0) >> 4;\r\n      dst += this.chars[n1];\r\n      dst += this.chars[n2];\r\n      if (len == 2) {\r\n        var n3 = (src[i++] & 0x0f) << 2;\r\n        n3 |= (src[i] & 0xc0) >> 6;\r\n        dst += this.chars[n3];\r\n      }\r\n      if (len == 1) dst += \"=\";\r\n      dst += \"=\";\r\n    }\r\n    return dst;\r\n  }, // end Encode\r\n};\r\n\r\nFastBase64.Init();\r\nvar RIFFWAVE;\r\nexport default RIFFWAVE = function (data) {\r\n  this.data;\r\n  this.wav;\r\n  this.dataURI;\r\n\r\n  this.data = []; // Array containing audio samples\r\n  this.wav = []; // Array containing the generated wave file\r\n  this.dataURI = \"\"; // http://en.wikipedia.org/wiki/Data_URI_scheme\r\n\r\n  this.header = {\r\n    // OFFS SIZE NOTES\r\n    chunkId: [0x52, 0x49, 0x46, 0x46], // 0    4    \"RIFF\" = 0x52494646\r\n    chunkSize: 0, // 4    4    36+SubChunk2Size = 4+(8+SubChunk1Size)+(8+SubChunk2Size)\r\n    format: [0x57, 0x41, 0x56, 0x45], // 8    4    \"WAVE\" = 0x57415645\r\n    subChunk1Id: [0x66, 0x6d, 0x74, 0x20], // 12   4    \"fmt \" = 0x666d7420\r\n    subChunk1Size: 16, // 16   4    16 for PCM\r\n    audioFormat: 1, // 20   2    PCM = 1\r\n    numChannels: 1, // 22   2    Mono = 1, Stereo = 2...\r\n    sampleRate: 8000, // 24   4    8000, 44100...\r\n    byteRate: 0, // 28   4    SampleRate*NumChannels*BitsPerSample/8\r\n    blockAlign: 0, // 32   2    NumChannels*BitsPerSample/8\r\n    bitsPerSample: 8, // 34   2    8 bits = 8, 16 bits = 16\r\n    subChunk2Id: [0x64, 0x61, 0x74, 0x61], // 36   4    \"data\" = 0x64617461\r\n    subChunk2Size: 0, // 40   4    data size = NumSamples*NumChannels*BitsPerSample/8\r\n  };\r\n\r\n  function u32ToArray(i) {\r\n    return [i & 0xff, (i >> 8) & 0xff, (i >> 16) & 0xff, (i >> 24) & 0xff];\r\n  }\r\n\r\n  function u16ToArray(i) {\r\n    return [i & 0xff, (i >> 8) & 0xff];\r\n  }\r\n\r\n  function split16bitArray(data) {\r\n    var r = [];\r\n    var j = 0;\r\n    var len = data.length;\r\n    for (var i = 0; i < len; i++) {\r\n      r[j++] = data[i] & 0xff;\r\n      r[j++] = (data[i] >> 8) & 0xff;\r\n    }\r\n    return r;\r\n  }\r\n\r\n  this.Make = function (data) {\r\n    if (data instanceof Array) this.data = data;\r\n    this.header.byteRate = (this.header.sampleRate * this.header.numChannels * this.header.bitsPerSample) >> 3;\r\n    this.header.blockAlign = (this.header.numChannels * this.header.bitsPerSample) >> 3;\r\n    this.header.subChunk2Size = this.data.length;\r\n    this.header.chunkSize = 36 + this.header.subChunk2Size;\r\n\r\n    this.wav = this.header.chunkId.concat(\r\n      u32ToArray(this.header.chunkSize),\r\n      this.header.format,\r\n      this.header.subChunk1Id,\r\n      u32ToArray(this.header.subChunk1Size),\r\n      u16ToArray(this.header.audioFormat),\r\n      u16ToArray(this.header.numChannels),\r\n      u32ToArray(this.header.sampleRate),\r\n      u32ToArray(this.header.byteRate),\r\n      u16ToArray(this.header.blockAlign),\r\n      u16ToArray(this.header.bitsPerSample),\r\n      this.header.subChunk2Id,\r\n      u32ToArray(this.header.subChunk2Size),\r\n      this.data\r\n    );\r\n    this.dataURI = \"data:audio/wav;base64,\" + FastBase64.Encode(this.wav);\r\n  };\r\n\r\n  if (data instanceof Array) this.Make(data);\r\n}; // end RIFFWAVE\r\n"],"names":["$parcel$export","e","n","v","s","Object","defineProperty","get","set","enumerable","configurable","parcelRequire","$parcel$global","globalThis","parcelRegister","register","module","exports","value","$cc22cbeb3abb3021$export$2e2bcd8739ae039","$cc22cbeb3abb3021$var$sfxr","$1TuIX","$cc22cbeb3abb3021$var$Params","oldParams","wave_type","p_env_attack","p_env_sustain","p_env_punch","p_env_decay","p_base_freq","p_freq_limit","p_freq_ramp","p_freq_dramp","p_vib_strength","p_vib_speed","p_arp_mod","p_arp_speed","p_duty","p_duty_ramp","p_repeat_speed","p_pha_offset","p_pha_ramp","p_lpf_freq","p_lpf_ramp","p_lpf_resonance","p_hpf_freq","p_hpf_ramp","sound_vol","sample_rate","sample_size","$cc22cbeb3abb3021$var$frnd","range","Math","random","$cc22cbeb3abb3021$var$rndr","from","to","$cc22cbeb3abb3021$var$rnd","max","floor","$cc22cbeb3abb3021$var$assembleFloat","sign","exponent","mantissa","$cc22cbeb3abb3021$var$b58alphabet","$cc22cbeb3abb3021$var$params_order","prototype","toB58","convert","pi","p","push","indexOf","val","$cc22cbeb3abb3021$var$floatToNumber","flt","isNaN","abs","log","LN2","pow","B","A","i","j","c","d","length","fromB58","b58encoded","fromJSON","b58decode","struct","hasOwnProperty","pickupCoin","laserShoot","explosion","x","powerUp","hitHurt","jump","blipSelect","synth","tone","click","$cc22cbeb3abb3021$var$cube","mutate","p_vib_delay","$cc22cbeb3abb3021$var$SoundEffect","ps","PARAMS","slice","init","toBuffer","synthdef","getRawBuffer","toWebAudio","audiocontext","sfx","buffer","buff","createBuffer","sampleRate","nowBuffering","getChannelData","proc","createBufferSource","toWave","generate","toAudio","getAudio","play","decoded","S","b","Uint8Array","result","offset","$cc22cbeb3abb3021$var$numberToFloat","bytes","significand","Number","NaN","POSITIVE_INFINITY","b58encode","algorithm","options","opts","parameters","initForRepeat","waveShape","parseInt","fltw","enableLowPassFilter","fltw_d","fltdmp","flthp","flthp_d","vibratoSpeed","vibratoAmplitude","envelopeLength","envelopePunch","flangerOffset","flangerOffsetSlide","repeatTime","gain","exp","bitsPerChannel","elapsedSinceRepeat","period","periodMax","enableFrequencyCutoff","periodMult","periodMultSlide","dutyCycle","dutyCycleSlide","arpeggioMultiplier","arpeggioTime","fltp","fltdp","fltphp","noise_buffer","Array","envelopeStage","envelopeElapsed","vibratoPhase","phase","ipp","flanger_buffer","num_clipped","normalized","sample_sum","num_summed","summands","t","env_vol","rfperiod","sin","iperiod","envf","iphase","sample","si","sub_sample","fp","PI","pp","clipped","rendered","wave","default","header","bitsPerSample","Make","clipping","$cc22cbeb3abb3021$var$_sfxr_getAudioFn","$cc22cbeb3abb3021$var$_actx","actx","window","AudioContext","webkitAudioContext","volume","obj","channels","setVolume","gainNode","createGain","connect","destination","start","noteOn","audio","Audio","src","dataURI","$44b164ac3b7136fc$export$2e2bcd8739ae039","$44b164ac3b7136fc$var$FastBase64","chars","encLookup","Init","Encode","len","dst","n1","n2","n3","data","u32ToArray","u16ToArray","wav","chunkId","chunkSize","format","subChunk1Id","subChunk1Size","audioFormat","numChannels","byteRate","blockAlign","subChunk2Id","subChunk2Size","concat"],"version":3,"file":"sfxr.d2fa2fe4.js.map"}